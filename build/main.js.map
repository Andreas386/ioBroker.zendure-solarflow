{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/indent */\r\n/*\r\n * Created with @iobroker/create-adapter v2.5.0\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from \"@iobroker/adapter-core\";\r\nimport { connectMqttClient, setOutputLimit } from \"./services/mqttService\";\r\nimport { getDeviceList, login } from \"./services/webService\";\r\nimport { ISolarFlowDeviceDetails } from \"./models/ISolarFlowDeviceDetails\";\r\nimport { ISolarFlowPaths } from \"./models/ISolarFlowPaths\";\r\nimport { pathsGlobal } from \"./constants/paths\";\r\nimport { startCheckStatesTimer } from \"./services/adapterService\";\r\n\r\nexport class ZendureSolarflow extends utils.Adapter {\r\n  public constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n    super({\r\n      ...options,\r\n      name: \"zendure-solarflow\",\r\n    });\r\n    this.on(\"ready\", this.onReady.bind(this));\r\n    this.on(\"stateChange\", this.onStateChange.bind(this));\r\n    this.on(\"unload\", this.onUnload.bind(this));\r\n  }\r\n\r\n  public accessToken: string | undefined = undefined; // Access Token for Zendure Rest API\r\n  public deviceList: ISolarFlowDeviceDetails[] = [];\r\n  public paths: ISolarFlowPaths | undefined = undefined;\r\n  public interval: ioBroker.Interval | undefined = undefined;\r\n\r\n  /**\r\n   * Is called when databases are connected and adapter received configuration.\r\n   */\r\n  private async onReady(): Promise<void> {\r\n    // Currently only global Zendure Server are supported!\r\n    this.paths = pathsGlobal;\r\n\r\n    // If Username and Password is provided, try to login and get the access token.\r\n    if (this.config.userName && this.config.password) {\r\n      login(this)\r\n        ?.then((_accessToken: string) => {\r\n          this.accessToken = _accessToken;\r\n\r\n          this.connected = true;\r\n\r\n          // Try to get the device list\r\n          getDeviceList(this)\r\n            .then((result: ISolarFlowDeviceDetails[]) => {\r\n              if (result) {\r\n                // Device List found. Save in the adapter properties and connect to MQTT\r\n                this.deviceList = result;\r\n                connectMqttClient(this);\r\n                startCheckStatesTimer(this);\r\n              }\r\n            })\r\n            .catch(() => {\r\n              this.connected = false;\r\n              this.log?.error(\"Retrieving device failed!\");\r\n            });\r\n        })\r\n        .catch((error) => {\r\n          this.connected = false;\r\n          this.log.error(\r\n            \"Logon error at Zendure cloud service! Error: \" + error.toString(),\r\n          );\r\n        });\r\n    } else {\r\n      this.connected = false;\r\n      this.log.error(\"No Login Information provided!\");\r\n      //this.stop?.();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n   */\r\n  private onUnload(callback: () => void): void {\r\n    try {\r\n      if (this.interval) {\r\n        this.clearInterval(this.interval);\r\n      }\r\n      callback();\r\n    } catch (e) {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Is called if a subscribed state changes\r\n   */\r\n  private onStateChange(\r\n    id: string,\r\n    state: ioBroker.State | null | undefined,\r\n  ): void {\r\n    if (state && !state.ack) {\r\n      // The state was changed\r\n      this.log.debug(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n      if (\r\n        id.includes(\"setOutputLimit\") &&\r\n        state.val != undefined &&\r\n        state.val != null\r\n      ) {\r\n        const splitted = id.split(\".\");\r\n        const productKey = splitted[2];\r\n        const deviceKey = splitted[3];\r\n        setOutputLimit(this, productKey, deviceKey, Number(state.val));\r\n      }\r\n    } else {\r\n      // The state was deleted\r\n      this.log.debug(`state ${id} deleted`);\r\n    }\r\n  }\r\n}\r\n\r\nif (require.main !== module) {\r\n  // Export the constructor in compact mode\r\n  module.exports = (options: Partial<utils.AdapterOptions> | undefined) =>\r\n    new ZendureSolarflow(options);\r\n} else {\r\n  // otherwise start the instance directly\r\n  (() => new ZendureSolarflow())();\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,YAAuB;AACvB,yBAAkD;AAClD,wBAAqC;AAGrC,mBAA4B;AAC5B,4BAAsC;AAE/B,MAAM,yBAAyB,MAAM,QAAQ;AAAA,EAC3C,YAAY,UAAyC,CAAC,GAAG;AAC9D,UAAM;AAAA,MACJ,GAAG;AAAA,MACH,MAAM;AAAA,IACR,CAAC;AAMH,SAAO,cAAkC;AACzC,SAAO,aAAwC,CAAC;AAChD,SAAO,QAAqC;AAC5C,SAAO,WAA0C;AAR/C,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AACpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC5C;AAAA,EAUA,MAAc,UAAyB;AAlCzC;AAoCI,SAAK,QAAQ;AAGb,QAAI,KAAK,OAAO,YAAY,KAAK,OAAO,UAAU;AAChD,yCAAM,IAAI,MAAV,mBACI,KAAK,CAAC,iBAAyB;AAC/B,aAAK,cAAc;AAEnB,aAAK,YAAY;AAGjB,6CAAc,IAAI,EACf,KAAK,CAAC,WAAsC;AAC3C,cAAI,QAAQ;AAEV,iBAAK,aAAa;AAClB,sDAAkB,IAAI;AACtB,6DAAsB,IAAI;AAAA,UAC5B;AAAA,QACF,CAAC,EACA,MAAM,MAAM;AAxDzB,cAAAA;AAyDc,eAAK,YAAY;AACjB,WAAAA,MAAA,KAAK,QAAL,gBAAAA,IAAU,MAAM;AAAA,QAClB,CAAC;AAAA,MACL,GACC,MAAM,CAAC,UAAU;AAChB,aAAK,YAAY;AACjB,aAAK,IAAI;AAAA,UACP,kDAAkD,MAAM,SAAS;AAAA,QACnE;AAAA,MACF;AAAA,IACJ,OAAO;AACL,WAAK,YAAY;AACjB,WAAK,IAAI,MAAM,gCAAgC;AAAA,IAEjD;AAAA,EACF;AAAA,EAKQ,SAAS,UAA4B;AAC3C,QAAI;AACF,UAAI,KAAK,UAAU;AACjB,aAAK,cAAc,KAAK,QAAQ;AAAA,MAClC;AACA,eAAS;AAAA,IACX,SAAS,GAAP;AACA,eAAS;AAAA,IACX;AAAA,EACF;AAAA,EAKQ,cACN,IACA,OACM;AACN,QAAI,SAAS,CAAC,MAAM,KAAK;AAEvB,WAAK,IAAI,MAAM,SAAS,eAAe,MAAM,cAAc,MAAM,MAAM;AACvE,UACE,GAAG,SAAS,gBAAgB,KAC5B,MAAM,OAAO,UACb,MAAM,OAAO,MACb;AACA,cAAM,WAAW,GAAG,MAAM,GAAG;AAC7B,cAAM,aAAa,SAAS;AAC5B,cAAM,YAAY,SAAS;AAC3B,+CAAe,MAAM,YAAY,WAAW,OAAO,MAAM,GAAG,CAAC;AAAA,MAC/D;AAAA,IACF,OAAO;AAEL,WAAK,IAAI,MAAM,SAAS,YAAY;AAAA,IACtC;AAAA,EACF;AACF;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAE3B,SAAO,UAAU,CAAC,YAChB,IAAI,iBAAiB,OAAO;AAChC,OAAO;AAEL,GAAC,MAAM,IAAI,iBAAiB,GAAG;AACjC;",
  "names": ["_a"]
}
