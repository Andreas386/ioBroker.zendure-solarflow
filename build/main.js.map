{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/indent */\r\n/*\r\n * Created with @iobroker/create-adapter v2.5.0\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from \"@iobroker/adapter-core\";\r\nimport { connectMqttClient, setOutputLimit } from \"./services/mqttService\";\r\nimport { getDeviceList, login } from \"./services/webService\";\r\nimport { ISolarFlowDeviceDetails } from \"./models/ISolarFlowDeviceDetails\";\r\nimport { ISolarFlowPaths } from \"./models/ISolarFlowPaths\";\r\nimport { pathsEu, pathsGlobal } from \"./constants/paths\";\r\n\r\n// Load your modules here, e.g.:\r\n// import * as fs from \"fs\";\r\n\r\nexport class ZendureSolarflow extends utils.Adapter {\r\n  public constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n    super({\r\n      ...options,\r\n      name: \"zendure-solarflow\",\r\n    });\r\n    this.on(\"ready\", this.onReady.bind(this));\r\n    this.on(\"stateChange\", this.onStateChange.bind(this));\r\n    // this.on(\"objectChange\", this.onObjectChange.bind(this));\r\n    // this.on(\"message\", this.onMessage.bind(this));\r\n    this.on(\"unload\", this.onUnload.bind(this));\r\n  }\r\n\r\n  public accessToken: string | undefined = undefined; // Access Token for Zendure Rest API\r\n  public deviceList: ISolarFlowDeviceDetails[] = [];\r\n  public paths: ISolarFlowPaths | undefined = undefined;\r\n\r\n  /**\r\n   * Is called when databases are connected and adapter received configuration.\r\n   */\r\n  private async onReady(): Promise<void> {\r\n    // Initialize your adapter here\r\n\r\n    // Currently only global Zendure Server are supported!\r\n    this.paths = pathsGlobal;\r\n\r\n    // The adapters config (in the instance object everything under the attribute \"native\") is accessible via\r\n    // this.config:\r\n    if (this.config.userName && this.config.password) {\r\n      login(this)?.then((_accessToken: string) => {\r\n        this.accessToken = _accessToken;\r\n\r\n        console.log(\"AccessToken: \" + this.accessToken);\r\n\r\n        getDeviceList(this).then((result: ISolarFlowDeviceDetails[]) => {\r\n          if (result) {\r\n            // Wir haben eine Device List!\r\n            this.deviceList = result;\r\n\r\n            connectMqttClient(this);\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      this.log.error(\"No Login Information provided!\");\r\n      this.stop?.();\r\n    }\r\n\r\n    /*\r\n\t\tFor every state in the system there has to be also an object of type state\r\n\t\tHere a simple template for a boolean variable named \"testVariable\"\r\n\t\tBecause every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\r\n\t\t*/\r\n\r\n    // In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\r\n    // this.subscribeStates(\"testVariable\");\r\n    // You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\r\n    // this.subscribeStates(\"lights.*\");\r\n    // Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\r\n    // this.subscribeStates(\"*\");\r\n\r\n    /*\r\n\t\t\tsetState examples\r\n\t\t\tyou will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\r\n\t\t*/\r\n    // the variable testVariable is set to true as command (ack=false)\r\n    // await this.setStateAsync(\"testVariable\", true);\r\n\r\n    // same thing, but the value is flagged \"ack\"\r\n    // ack should be always set to true if the value is received from or acknowledged from the target system\r\n    // await this.setStateAsync(\"testVariable\", { val: true, ack: true });\r\n\r\n    // same thing, but the state is deleted after 30s (getState will return null afterwards)\r\n    // await this.setStateAsync(\"testVariable\", {\r\n    //   val: true,\r\n    //   ack: true,\r\n    //   expire: 30,\r\n    // });\r\n\r\n    // examples for the checkPassword/checkGroup functions\r\n    //let result = await this.checkPasswordAsync(\"admin\", \"iobroker\");\r\n    //this.log.info(\"check user admin pw iobroker: \" + result);\r\n\r\n    //result = await this.checkGroupAsync(\"admin\", \"admin\");\r\n    //this.log.info(\"check group user admin group admin: \" + result);\r\n  }\r\n\r\n  /**\r\n   * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n   */\r\n  private onUnload(callback: () => void): void {\r\n    try {\r\n      // Here you must clear all timeouts or intervals that may still be active\r\n      // clearTimeout(timeout1);\r\n      // clearTimeout(timeout2);\r\n      // ...\r\n      // clearInterval(interval1);\r\n\r\n      callback();\r\n    } catch (e) {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\r\n  // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\r\n  // /**\r\n  //  * Is called if a subscribed object changes\r\n  //  */\r\n  // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\r\n  // \tif (obj) {\r\n  // \t\t// The object was changed\r\n  // \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\r\n  // \t} else {\r\n  // \t\t// The object was deleted\r\n  // \t\tthis.log.info(`object ${id} deleted`);\r\n  // \t}\r\n  // }\r\n\r\n  /**\r\n   * Is called if a subscribed state changes\r\n   */\r\n  private onStateChange(\r\n    id: string,\r\n    state: ioBroker.State | null | undefined,\r\n  ): void {\r\n    if (state) {\r\n      // The state was changed\r\n      this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n      if (id.includes(\"setOutputLimit\") && state.val) {\r\n        const splitted = id.split(\".\");\r\n        const productKey = splitted[2];\r\n        const deviceKey = splitted[3];\r\n        setOutputLimit(this, productKey, deviceKey, Number(state.val));\r\n      }\r\n    } else {\r\n      // The state was deleted\r\n      this.log.info(`state ${id} deleted`);\r\n    }\r\n  }\r\n\r\n  // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\r\n  // /**\r\n  //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\r\n  //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\r\n  //  */\r\n  // private onMessage(obj: ioBroker.Message): void {\r\n  // \tif (typeof obj === \"object\" && obj.message) {\r\n  // \t\tif (obj.command === \"send\") {\r\n  // \t\t\t// e.g. send email or pushover or whatever\r\n  // \t\t\tthis.log.info(\"send command\");\r\n\r\n  // \t\t\t// Send response in callback if required\r\n  // \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\r\n  // \t\t}\r\n  // \t}\r\n  // }\r\n}\r\n\r\nif (require.main !== module) {\r\n  // Export the constructor in compact mode\r\n  module.exports = (options: Partial<utils.AdapterOptions> | undefined) =>\r\n    new ZendureSolarflow(options);\r\n} else {\r\n  // otherwise start the instance directly\r\n  (() => new ZendureSolarflow())();\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,YAAuB;AACvB,yBAAkD;AAClD,wBAAqC;AAGrC,mBAAqC;AAK9B,MAAM,yBAAyB,MAAM,QAAQ;AAAA,EAC3C,YAAY,UAAyC,CAAC,GAAG;AAC9D,UAAM;AAAA,MACJ,GAAG;AAAA,MACH,MAAM;AAAA,IACR,CAAC;AAQH,SAAO,cAAkC;AACzC,SAAO,aAAwC,CAAC;AAChD,SAAO,QAAqC;AAT1C,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAGpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC5C;AAAA,EASA,MAAc,UAAyB;AArCzC;AAyCI,SAAK,QAAQ;AAIb,QAAI,KAAK,OAAO,YAAY,KAAK,OAAO,UAAU;AAChD,yCAAM,IAAI,MAAV,mBAAa,KAAK,CAAC,iBAAyB;AAC1C,aAAK,cAAc;AAEnB,gBAAQ,IAAI,kBAAkB,KAAK,WAAW;AAE9C,6CAAc,IAAI,EAAE,KAAK,CAAC,WAAsC;AAC9D,cAAI,QAAQ;AAEV,iBAAK,aAAa;AAElB,sDAAkB,IAAI;AAAA,UACxB;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF,OAAO;AACL,WAAK,IAAI,MAAM,gCAAgC;AAC/C,iBAAK,SAAL;AAAA,IACF;AAAA,EAuCF;AAAA,EAKQ,SAAS,UAA4B;AAC3C,QAAI;AAOF,eAAS;AAAA,IACX,SAAS,GAAP;AACA,eAAS;AAAA,IACX;AAAA,EACF;AAAA,EAoBQ,cACN,IACA,OACM;AACN,QAAI,OAAO;AAET,WAAK,IAAI,KAAK,SAAS,eAAe,MAAM,cAAc,MAAM,MAAM;AACtE,UAAI,GAAG,SAAS,gBAAgB,KAAK,MAAM,KAAK;AAC9C,cAAM,WAAW,GAAG,MAAM,GAAG;AAC7B,cAAM,aAAa,SAAS;AAC5B,cAAM,YAAY,SAAS;AAC3B,+CAAe,MAAM,YAAY,WAAW,OAAO,MAAM,GAAG,CAAC;AAAA,MAC/D;AAAA,IACF,OAAO;AAEL,WAAK,IAAI,KAAK,SAAS,YAAY;AAAA,IACrC;AAAA,EACF;AAkBF;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAE3B,SAAO,UAAU,CAAC,YAChB,IAAI,iBAAiB,OAAO;AAChC,OAAO;AAEL,GAAC,MAAM,IAAI,iBAAiB,GAAG;AACjC;",
  "names": []
}
