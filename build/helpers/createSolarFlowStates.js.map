{
  "version": 3,
  "sources": ["../../src/helpers/createSolarFlowStates.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/indent */\r\n\r\nimport { aceStates } from \"../constants/aceStates\";\r\nimport { aioStates } from \"../constants/aioStates\";\r\nimport { hubStates } from \"../constants/hubStates\";\r\nimport { hyperStates } from \"../constants/hyperStates\";\r\nimport { ZendureSolarflow } from \"../main\";\r\nimport { ISolarFlowDeviceDetails } from \"../models/ISolarFlowDeviceDetails\";\r\nimport { ISolarflowState } from \"../models/ISolarflowState\";\r\nimport { updateSolarFlowState } from \"../services/adapterService\";\r\nimport { createCalculationStates } from \"./createCalculationStates\";\r\nimport { createControlStates } from \"./createControlStates\";\r\n//import { deleteCalculationStates } from \"./deleteCalculationStates\";\r\n\r\nconst getStateDefinition = (type: string): ISolarflowState[] => {\r\n  switch (type) {\r\n    case \"aio\":\r\n      return aioStates;\r\n    case \"hyper\":\r\n      return hyperStates;\r\n    case \"solarflow\":\r\n      return hubStates;\r\n    case \"ace\":\r\n      return aceStates;\r\n    default:\r\n      return [];\r\n  }\r\n};\r\n\r\nexport const createSolarFlowStates = async (\r\n  adapter: ZendureSolarflow,\r\n  device: ISolarFlowDeviceDetails,\r\n  type: string\r\n): Promise<void> => {\r\n  const productKey = device.productKey.replace(adapter.FORBIDDEN_CHARS, \"\");\r\n  const deviceKey = device.deviceKey.replace(adapter.FORBIDDEN_CHARS, \"\");\r\n\r\n  adapter.log.debug(\r\n    `[createSolarFlowStates] Creating or updating SolarFlow states for ${device.productName} (${productKey}/${deviceKey}) and name '${device.name}'.`\r\n  );\r\n\r\n  // Create device (e.g. the product type -> SolarFlow)\r\n  await adapter?.extendObject(productKey, {\r\n    type: \"device\",\r\n    common: {\r\n      name: {\r\n        de: `${device.productName} (${productKey})`,\r\n        en: `${device.productName} (${productKey})`,\r\n      },\r\n    },\r\n    native: {},\r\n  });\r\n\r\n  // Create channel (e.g. the device specific key)\r\n  await adapter?.extendObject(productKey + \".\" + deviceKey, {\r\n    type: \"channel\",\r\n    common: {\r\n      name: { de: \"Device Key \" + deviceKey, en: \"Device Key \" + deviceKey },\r\n    },\r\n    native: {},\r\n  });\r\n\r\n  // Create calculations folder\r\n  await adapter?.extendObject(`${productKey}.${deviceKey}.calculations`, {\r\n    type: \"channel\",\r\n    common: {\r\n      name: {\r\n        de: \"Berechnungen f\u00FCr Ger\u00E4t \" + deviceKey,\r\n        en: \"Calculations for Device \" + deviceKey,\r\n      },\r\n    },\r\n    native: {},\r\n  });\r\n\r\n  // Create pack data folder\r\n  await adapter?.extendObject(`${productKey}.${deviceKey}.packData`, {\r\n    type: \"channel\",\r\n    common: {\r\n      name: {\r\n        de: \"Batterie Packs\",\r\n        en: \"Battery packs\",\r\n      },\r\n    },\r\n    native: {},\r\n  });\r\n\r\n  const states = getStateDefinition(type);\r\n\r\n  states.forEach(async (state: ISolarflowState) => {\r\n    await adapter?.extendObject(`${productKey}.${deviceKey}.${state.title}`, {\r\n      type: \"state\",\r\n      common: {\r\n        name: {\r\n          de: state.nameDe,\r\n          en: state.nameEn,\r\n        },\r\n        type: state.type,\r\n        desc: state.title,\r\n        role: state.role,\r\n        read: true,\r\n        write: false,\r\n        unit: state.unit,\r\n      },\r\n      native: {},\r\n    });\r\n  });\r\n\r\n  // Set sn number from device\r\n  if (device.electricity) {\r\n    await updateSolarFlowState(\r\n      adapter,\r\n      device.productKey,\r\n      device.deviceKey,\r\n      \"electricLevel\",\r\n      device.electricity\r\n    );\r\n  }\r\n\r\n  // Set sn number from device\r\n  if (device.snNumber) {\r\n    await updateSolarFlowState(\r\n      adapter,\r\n      device.productKey,\r\n      device.deviceKey,\r\n      \"snNumber\",\r\n      device.snNumber.toString()\r\n    );\r\n  }\r\n\r\n  // Set product name from device\r\n  await updateSolarFlowState(\r\n    adapter,\r\n    device.productKey,\r\n    device.deviceKey,\r\n    \"productName\",\r\n    device.productName\r\n  );\r\n\r\n  // Set wifi state from device\r\n  await updateSolarFlowState(\r\n    adapter,\r\n    device.productKey,\r\n    device.deviceKey,\r\n    \"wifiState\",\r\n    device.wifiStatus ? \"Connected\" : \"Disconnected\"\r\n  );\r\n\r\n  // Create control states only when using App MQTT servers - and not the fallback one!\r\n  if (!adapter.config.useFallbackService) {\r\n    await createControlStates(adapter, productKey, deviceKey, type);\r\n  }\r\n\r\n  if (\r\n    adapter.config.useCalculation &&\r\n    (type == \"solarflow\" || type == \"hyper\")\r\n  ) {\r\n    await createCalculationStates(adapter, productKey, deviceKey);\r\n  } else {\r\n    //await deleteCalculationStates(adapter, productKey, deviceKey);\r\n  }\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,uBAA0B;AAC1B,uBAA0B;AAC1B,uBAA0B;AAC1B,yBAA4B;AAI5B,4BAAqC;AACrC,qCAAwC;AACxC,iCAAoC;AAGpC,MAAM,qBAAqB,CAAC,SAAoC;AAC9D,UAAQ,MAAM;AAAA,IACZ,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT;AACE,aAAO,CAAC;AAAA,EACZ;AACF;AAEO,MAAM,wBAAwB,OACnC,SACA,QACA,SACkB;AAClB,QAAM,aAAa,OAAO,WAAW,QAAQ,QAAQ,iBAAiB,EAAE;AACxE,QAAM,YAAY,OAAO,UAAU,QAAQ,QAAQ,iBAAiB,EAAE;AAEtE,UAAQ,IAAI;AAAA,IACV,qEAAqE,OAAO,WAAW,KAAK,UAAU,IAAI,SAAS,eAAe,OAAO,IAAI;AAAA,EAC/I;AAGA,SAAM,mCAAS,aAAa,YAAY;AAAA,IACtC,MAAM;AAAA,IACN,QAAQ;AAAA,MACN,MAAM;AAAA,QACJ,IAAI,GAAG,OAAO,WAAW,KAAK,UAAU;AAAA,QACxC,IAAI,GAAG,OAAO,WAAW,KAAK,UAAU;AAAA,MAC1C;AAAA,IACF;AAAA,IACA,QAAQ,CAAC;AAAA,EACX;AAGA,SAAM,mCAAS,aAAa,aAAa,MAAM,WAAW;AAAA,IACxD,MAAM;AAAA,IACN,QAAQ;AAAA,MACN,MAAM,EAAE,IAAI,gBAAgB,WAAW,IAAI,gBAAgB,UAAU;AAAA,IACvE;AAAA,IACA,QAAQ,CAAC;AAAA,EACX;AAGA,SAAM,mCAAS,aAAa,GAAG,UAAU,IAAI,SAAS,iBAAiB;AAAA,IACrE,MAAM;AAAA,IACN,QAAQ;AAAA,MACN,MAAM;AAAA,QACJ,IAAI,kCAA4B;AAAA,QAChC,IAAI,6BAA6B;AAAA,MACnC;AAAA,IACF;AAAA,IACA,QAAQ,CAAC;AAAA,EACX;AAGA,SAAM,mCAAS,aAAa,GAAG,UAAU,IAAI,SAAS,aAAa;AAAA,IACjE,MAAM;AAAA,IACN,QAAQ;AAAA,MACN,MAAM;AAAA,QACJ,IAAI;AAAA,QACJ,IAAI;AAAA,MACN;AAAA,IACF;AAAA,IACA,QAAQ,CAAC;AAAA,EACX;AAEA,QAAM,SAAS,mBAAmB,IAAI;AAEtC,SAAO,QAAQ,OAAO,UAA2B;AAC/C,WAAM,mCAAS,aAAa,GAAG,UAAU,IAAI,SAAS,IAAI,MAAM,KAAK,IAAI;AAAA,MACvE,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,MAAM;AAAA,UACJ,IAAI,MAAM;AAAA,UACV,IAAI,MAAM;AAAA,QACZ;AAAA,QACA,MAAM,MAAM;AAAA,QACZ,MAAM,MAAM;AAAA,QACZ,MAAM,MAAM;AAAA,QACZ,MAAM;AAAA,QACN,OAAO;AAAA,QACP,MAAM,MAAM;AAAA,MACd;AAAA,MACA,QAAQ,CAAC;AAAA,IACX;AAAA,EACF,CAAC;AAGD,MAAI,OAAO,aAAa;AACtB,cAAM;AAAA,MACJ;AAAA,MACA,OAAO;AAAA,MACP,OAAO;AAAA,MACP;AAAA,MACA,OAAO;AAAA,IACT;AAAA,EACF;AAGA,MAAI,OAAO,UAAU;AACnB,cAAM;AAAA,MACJ;AAAA,MACA,OAAO;AAAA,MACP,OAAO;AAAA,MACP;AAAA,MACA,OAAO,SAAS,SAAS;AAAA,IAC3B;AAAA,EACF;AAGA,YAAM;AAAA,IACJ;AAAA,IACA,OAAO;AAAA,IACP,OAAO;AAAA,IACP;AAAA,IACA,OAAO;AAAA,EACT;AAGA,YAAM;AAAA,IACJ;AAAA,IACA,OAAO;AAAA,IACP,OAAO;AAAA,IACP;AAAA,IACA,OAAO,aAAa,cAAc;AAAA,EACpC;AAGA,MAAI,CAAC,QAAQ,OAAO,oBAAoB;AACtC,cAAM,gDAAoB,SAAS,YAAY,WAAW,IAAI;AAAA,EAChE;AAEA,MACE,QAAQ,OAAO,mBACd,QAAQ,eAAe,QAAQ,UAChC;AACA,cAAM,wDAAwB,SAAS,YAAY,SAAS;AAAA,EAC9D,OAAO;AAAA,EAEP;AACF;",
  "names": []
}
