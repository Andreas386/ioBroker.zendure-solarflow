{
  "version": 3,
  "sources": ["../../src/services/calculationService.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/indent */\r\n\r\nimport { ZendureSolarflow } from \"../main\";\r\nimport { ISolarFlowDeviceDetails } from \"../models/ISolarFlowDeviceDetails\";\r\n\r\nexport const calculateSocAndEnergy = async (\r\n  adapter: ZendureSolarflow,\r\n  productKey: string,\r\n  deviceKey: string,\r\n  stateKey: string,\r\n  value: number,\r\n): Promise<void> => {\r\n  const currentEnergyState = await adapter?.getStateAsync(\r\n    productKey + \".\" + deviceKey + \".calculations.energyWh\",\r\n  );\r\n\r\n  const currentEnergyMaxState = await adapter?.getStateAsync(\r\n    productKey + \".\" + deviceKey + \".calculations.energyWhMax\",\r\n  );\r\n\r\n  const newValue =\r\n    stateKey == \"outputPack\"\r\n      ? Number(currentEnergyState?.val) + value\r\n      : Number(currentEnergyState?.val) - value;\r\n\r\n  if (newValue > 0) {\r\n    adapter?.setStateAsync(\r\n      productKey + \".\" + deviceKey + \".calculations.energyWh\",\r\n      newValue,\r\n      true,\r\n    );\r\n\r\n    if (currentEnergyMaxState) {\r\n      const soc = (newValue / Number(currentEnergyMaxState.val)) * 100;\r\n      adapter?.setStateAsync(\r\n        productKey + \".\" + deviceKey + \".calculations.soc\",\r\n        soc,\r\n        true,\r\n      );\r\n\r\n      if (newValue > Number(currentEnergyMaxState.val)) {\r\n        // Extend maxVal\r\n        adapter?.setStateAsync(\r\n          productKey + \".\" + deviceKey + \".calculations.energyWhMax\",\r\n          newValue,\r\n          true,\r\n        );\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const calculateEnergy = async (\r\n  adapter: ZendureSolarflow,\r\n  productKey: string,\r\n  deviceKey: string,\r\n  stateKey: string, // e.g. packInput, outputHome, outputPack, solarInput\r\n  state: ioBroker.State,\r\n): Promise<void> => {\r\n  const stateNameWh =\r\n    productKey +\r\n    \".\" +\r\n    deviceKey +\r\n    \".calculations.\" +\r\n    stateKey +\r\n    \"EnergyTodayWh\";\r\n\r\n  const stateNamekWh =\r\n    productKey +\r\n    \".\" +\r\n    deviceKey +\r\n    \".calculations.\" +\r\n    stateKey +\r\n    \"EnergyTodaykWh\";\r\n  const currentState = await adapter?.getStateAsync(stateNameWh);\r\n\r\n  if (currentState?.val == 0) {\r\n    // Workaround, set Val to very low value to avoid Jump in data...\r\n    adapter?.setStateAsync(stateNameWh, 0.000001, true);\r\n  } else if (\r\n    currentState &&\r\n    currentState.lc &&\r\n    state.val != undefined &&\r\n    state.val != null\r\n  ) {\r\n    const timeFrame = state.lc - currentState?.lc;\r\n\r\n    const addValue = (Number(state.val) * timeFrame) / 3600000; // Wh\r\n    const newValue = Number(currentState.val) + addValue;\r\n\r\n    adapter?.setStateAsync(stateNameWh, newValue, true);\r\n    adapter?.setStateAsync(\r\n      stateNamekWh,\r\n      Number((newValue / 1000).toFixed(2)),\r\n      true,\r\n    );\r\n\r\n    // SOC and energy in batteries\r\n    if (stateKey == \"outputPack\" || stateKey == \"packInput\") {\r\n      calculateSocAndEnergy(adapter, productKey, deviceKey, stateKey, addValue);\r\n    }\r\n  } else {\r\n    adapter?.setStateAsync(stateNameWh, 0, true);\r\n    adapter?.setStateAsync(stateNamekWh, 0, true);\r\n  }\r\n};\r\n\r\nexport const resetTodaysValues = async (\r\n  adapter: ZendureSolarflow,\r\n): Promise<void> => {\r\n  adapter.deviceList.forEach((device: ISolarFlowDeviceDetails) => {\r\n    const names = [\"packInput\", \"outputHome\", \"outputPack\", \"solarInput\"];\r\n\r\n    names.forEach((name: string) => {\r\n      const stateNameWh =\r\n        device.productKey +\r\n        \".\" +\r\n        device.deviceKey +\r\n        \".calculations.\" +\r\n        name +\r\n        \"EnergyTodayWh\";\r\n      const stateNamekWh =\r\n        device.productKey +\r\n        \".\" +\r\n        device.deviceKey +\r\n        \".calculations.\" +\r\n        name +\r\n        \"EnergyTodaykWh\";\r\n\r\n      adapter?.setStateAsync(stateNameWh, 0, true);\r\n      adapter?.setStateAsync(stateNamekWh, 0, true);\r\n    });\r\n  });\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKO,MAAM,wBAAwB,OACnC,SACA,YACA,WACA,UACA,UACkB;AAClB,QAAM,qBAAqB,OAAM,mCAAS;AAAA,IACxC,aAAa,MAAM,YAAY;AAAA;AAGjC,QAAM,wBAAwB,OAAM,mCAAS;AAAA,IAC3C,aAAa,MAAM,YAAY;AAAA;AAGjC,QAAM,WACJ,YAAY,eACR,OAAO,yDAAoB,GAAG,IAAI,QAClC,OAAO,yDAAoB,GAAG,IAAI;AAExC,MAAI,WAAW,GAAG;AAChB,uCAAS;AAAA,MACP,aAAa,MAAM,YAAY;AAAA,MAC/B;AAAA,MACA;AAAA;AAGF,QAAI,uBAAuB;AACzB,YAAM,MAAO,WAAW,OAAO,sBAAsB,GAAG,IAAK;AAC7D,yCAAS;AAAA,QACP,aAAa,MAAM,YAAY;AAAA,QAC/B;AAAA,QACA;AAAA;AAGF,UAAI,WAAW,OAAO,sBAAsB,GAAG,GAAG;AAEhD,2CAAS;AAAA,UACP,aAAa,MAAM,YAAY;AAAA,UAC/B;AAAA,UACA;AAAA;AAAA,MAEJ;AAAA,IACF;AAAA,EACF;AACF;AAEO,MAAM,kBAAkB,OAC7B,SACA,YACA,WACA,UACA,UACkB;AAClB,QAAM,cACJ,aACA,MACA,YACA,mBACA,WACA;AAEF,QAAM,eACJ,aACA,MACA,YACA,mBACA,WACA;AACF,QAAM,eAAe,OAAM,mCAAS,cAAc;AAElD,OAAI,6CAAc,QAAO,GAAG;AAE1B,uCAAS,cAAc,aAAa,MAAU;AAAA,EAChD,WACE,gBACA,aAAa,MACb,MAAM,OAAO,UACb,MAAM,OAAO,MACb;AACA,UAAM,YAAY,MAAM,MAAK,6CAAc;AAE3C,UAAM,WAAY,OAAO,MAAM,GAAG,IAAI,YAAa;AACnD,UAAM,WAAW,OAAO,aAAa,GAAG,IAAI;AAE5C,uCAAS,cAAc,aAAa,UAAU;AAC9C,uCAAS;AAAA,MACP;AAAA,MACA,QAAQ,WAAW,KAAM,QAAQ,CAAC,CAAC;AAAA,MACnC;AAAA;AAIF,QAAI,YAAY,gBAAgB,YAAY,aAAa;AACvD,4BAAsB,SAAS,YAAY,WAAW,UAAU,QAAQ;AAAA,IAC1E;AAAA,EACF,OAAO;AACL,uCAAS,cAAc,aAAa,GAAG;AACvC,uCAAS,cAAc,cAAc,GAAG;AAAA,EAC1C;AACF;AAEO,MAAM,oBAAoB,OAC/B,YACkB;AAClB,UAAQ,WAAW,QAAQ,CAAC,WAAoC;AAC9D,UAAM,QAAQ,CAAC,aAAa,cAAc,cAAc,YAAY;AAEpE,UAAM,QAAQ,CAAC,SAAiB;AAC9B,YAAM,cACJ,OAAO,aACP,MACA,OAAO,YACP,mBACA,OACA;AACF,YAAM,eACJ,OAAO,aACP,MACA,OAAO,YACP,mBACA,OACA;AAEF,yCAAS,cAAc,aAAa,GAAG;AACvC,yCAAS,cAAc,cAAc,GAAG;AAAA,IAC1C,CAAC;AAAA,EACH,CAAC;AACH;",
  "names": []
}
