{
  "version": 3,
  "sources": ["../../src/services/jobSchedule.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/indent */\r\nimport { scheduleJob } from \"node-schedule\";\r\nimport { ZendureSolarflow } from \"../main\";\r\nimport { connectMqttClient } from \"./mqttService\";\r\nimport { login } from \"./webService\";\r\nimport { ISolarFlowDeviceDetails } from \"../models/ISolarFlowDeviceDetails\";\r\nimport { calculateEnergy, resetTodaysValues } from \"./calculationService\";\r\n\r\nexport const startRefreshAccessTokenTimerJob = async (\r\n  adapter: ZendureSolarflow,\r\n): Promise<void> => {\r\n  adapter.refreshAccessTokenInterval = adapter.setInterval(\r\n    () => {\r\n      // Relogin at night to get a fresh accessToken!\r\n      adapter.log.info(\r\n        `[startRefreshAccessTokenTimerJob] Refreshing accessToken!`,\r\n      );\r\n\r\n      if (adapter.mqttClient) {\r\n        adapter.mqttClient.end();\r\n        adapter.mqttClient = undefined;\r\n      }\r\n\r\n      if (adapter.config.userName && adapter.config.password) {\r\n        login(adapter)?.then((_accessToken: string) => {\r\n          adapter.accessToken = _accessToken;\r\n          adapter.lastLogin = new Date();\r\n          adapter.setState(\"info.connection\", true, true);\r\n\r\n          connectMqttClient(adapter);\r\n        });\r\n      }\r\n    },\r\n    3 * 60 * 60 * 1000,\r\n  );\r\n};\r\n\r\nexport const startResetValuesJob = async (\r\n  adapter: ZendureSolarflow,\r\n): Promise<void> => {\r\n  adapter.resetValuesJob = scheduleJob(\"5 0 0 * * *\", () => {\r\n    // Reset Values\r\n    resetTodaysValues(adapter);\r\n  });\r\n};\r\n\r\nexport const startCalculationJob = async (\r\n  adapter: ZendureSolarflow,\r\n): Promise<void> => {\r\n  adapter.calculationJob = scheduleJob(\"*/30 * * * * *\", () => {\r\n    adapter.deviceList.forEach((device) => {\r\n      calculateEnergy(adapter, device.productKey, device.deviceKey);\r\n    });\r\n  });\r\n};\r\n\r\nexport const startCheckStatesJob = async (\r\n  adapter: ZendureSolarflow,\r\n): Promise<void> => {\r\n  // Check for states that has no updates in the last 5 minutes and set them to 0\r\n  const statesToReset: string[] = [\r\n    \"outputHomePower\",\r\n    \"outputPackPower\",\r\n    \"packInputPower\",\r\n    \"solarInputPower\",\r\n  ];\r\n\r\n  adapter.checkStatesJob = scheduleJob(\"*/10 * * * *\", async () => {\r\n    adapter.deviceList.forEach(async (device: ISolarFlowDeviceDetails) => {\r\n      const lastUpdate = await adapter?.getStateAsync(\r\n        device.productKey + \".\" + device.deviceKey + \".lastUpdate\",\r\n      );\r\n\r\n      const tenMinutesAgo = Date.now() / 1000 - 10 * 60; // Ten minutes ago\r\n\r\n      if (\r\n        lastUpdate &&\r\n        lastUpdate.val &&\r\n        Number(lastUpdate.val) < tenMinutesAgo\r\n      ) {\r\n        adapter.log.debug(\r\n          `[checkStatesJob] Last update for deviceKey ${\r\n            device.deviceKey\r\n          } was at ${new Date(\r\n            Number(lastUpdate),\r\n          )}, checking for pseudo power values!`,\r\n        );\r\n        // State was not updated in the last 10 minutes... set states to 0\r\n        await statesToReset.forEach(async (stateName: string) => {\r\n          await adapter?.setStateAsync(\r\n            device.productKey + \".\" + device.deviceKey + \".\" + stateName,\r\n            0,\r\n            true,\r\n          );\r\n        });\r\n\r\n        // set electricLevel from deviceList\r\n        if (device.electricity) {\r\n          await adapter?.setStateAsync(\r\n            device.productKey + \".\" + device.deviceKey + \".electricLevel\",\r\n            device.electricity,\r\n            true,\r\n          );\r\n        }\r\n      }\r\n    });\r\n  });\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,2BAA4B;AAE5B,yBAAkC;AAClC,wBAAsB;AAEtB,gCAAmD;AAE5C,MAAM,kCAAkC,OAC7C,YACkB;AAClB,UAAQ,6BAA6B,QAAQ;AAAA,IAC3C,MAAM;AAZV;AAcM,cAAQ,IAAI;AAAA,QACV;AAAA,MACF;AAEA,UAAI,QAAQ,YAAY;AACtB,gBAAQ,WAAW,IAAI;AACvB,gBAAQ,aAAa;AAAA,MACvB;AAEA,UAAI,QAAQ,OAAO,YAAY,QAAQ,OAAO,UAAU;AACtD,2CAAM,OAAO,MAAb,mBAAgB,KAAK,CAAC,iBAAyB;AAC7C,kBAAQ,cAAc;AACtB,kBAAQ,YAAY,oBAAI,KAAK;AAC7B,kBAAQ,SAAS,mBAAmB,MAAM,IAAI;AAE9C,oDAAkB,OAAO;AAAA,QAC3B;AAAA,MACF;AAAA,IACF;AAAA,IACA,IAAI,KAAK,KAAK;AAAA,EAChB;AACF;AAEO,MAAM,sBAAsB,OACjC,YACkB;AAClB,UAAQ,qBAAiB,kCAAY,eAAe,MAAM;AAExD,qDAAkB,OAAO;AAAA,EAC3B,CAAC;AACH;AAEO,MAAM,sBAAsB,OACjC,YACkB;AAClB,UAAQ,qBAAiB,kCAAY,kBAAkB,MAAM;AAC3D,YAAQ,WAAW,QAAQ,CAAC,WAAW;AACrC,qDAAgB,SAAS,OAAO,YAAY,OAAO,SAAS;AAAA,IAC9D,CAAC;AAAA,EACH,CAAC;AACH;AAEO,MAAM,sBAAsB,OACjC,YACkB;AAElB,QAAM,gBAA0B;AAAA,IAC9B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,UAAQ,qBAAiB,kCAAY,gBAAgB,YAAY;AAC/D,YAAQ,WAAW,QAAQ,OAAO,WAAoC;AACpE,YAAM,aAAa,OAAM,mCAAS;AAAA,QAChC,OAAO,aAAa,MAAM,OAAO,YAAY;AAAA;AAG/C,YAAM,gBAAgB,KAAK,IAAI,IAAI,MAAO,KAAK;AAE/C,UACE,cACA,WAAW,OACX,OAAO,WAAW,GAAG,IAAI,eACzB;AACA,gBAAQ,IAAI;AAAA,UACV,8CACE,OAAO,SACT,WAAW,IAAI;AAAA,YACb,OAAO,UAAU;AAAA,UACnB,CAAC;AAAA,QACH;AAEA,cAAM,cAAc,QAAQ,OAAO,cAAsB;AACvD,iBAAM,mCAAS;AAAA,YACb,OAAO,aAAa,MAAM,OAAO,YAAY,MAAM;AAAA,YACnD;AAAA,YACA;AAAA;AAAA,QAEJ,CAAC;AAGD,YAAI,OAAO,aAAa;AACtB,iBAAM,mCAAS;AAAA,YACb,OAAO,aAAa,MAAM,OAAO,YAAY;AAAA,YAC7C,OAAO;AAAA,YACP;AAAA;AAAA,QAEJ;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AACH;",
  "names": []
}
