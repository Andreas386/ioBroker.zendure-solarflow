{
  "version": 3,
  "sources": ["../../src/services/jobSchedule.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/indent */\r\nimport { scheduleJob } from \"node-schedule\";\r\nimport { ZendureSolarflow } from \"../main\";\r\nimport { connectMqttClient } from \"./mqttService\";\r\nimport { getDeviceList, login } from \"./webService\";\r\nimport { ISolarFlowDeviceDetails } from \"../models/ISolarFlowDeviceDetails\";\r\nimport { resetTodaysValues } from \"./calculationService\";\r\n\r\nexport const startReloginAndResetValuesJob = async (\r\n  adapter: ZendureSolarflow,\r\n): Promise<void> => {\r\n  adapter.resetValuesJob = scheduleJob(\"0 0 * * *\", () => {\r\n    // Relogin at night to get a fresh accessToken!\r\n    adapter.log.info(`[startReloginAndResetValuesJob] Refreshing accessToken!`);\r\n\r\n    if (adapter.mqttClient) {\r\n      adapter.mqttClient.end();\r\n      adapter.mqttClient = undefined;\r\n    }\r\n\r\n    if (adapter.config.userName && adapter.config.password) {\r\n      login(adapter)?.then((_accessToken: string) => {\r\n        adapter.accessToken = _accessToken;\r\n        adapter.lastLogin = new Date();\r\n        adapter.connected = true;\r\n\r\n        connectMqttClient(adapter);\r\n      });\r\n    }\r\n\r\n    // Reset Values\r\n    resetTodaysValues(adapter);\r\n  });\r\n};\r\n\r\nexport const startCheckStatesJob = async (\r\n  adapter: ZendureSolarflow,\r\n): Promise<void> => {\r\n  // Check for states that has no updates in the last 5 minutes and set them to 0\r\n  const statesToReset: string[] = [\r\n    \"outputHomePower\",\r\n    \"outputPackPower\",\r\n    \"packInputPower\",\r\n    \"solarInputPower\",\r\n  ];\r\n\r\n  adapter.checkStatesJob = scheduleJob(\"*/10 * * * *\", async () => {\r\n    getDeviceList(adapter)\r\n      .then((deviceList: ISolarFlowDeviceDetails[]) => {\r\n        deviceList.forEach(async (device: ISolarFlowDeviceDetails) => {\r\n          const lastUpdate = await adapter?.getStateAsync(\r\n            device.productKey + \".\" + device.deviceKey + \".lastUpdate\",\r\n          );\r\n\r\n          const tenMinutesAgo = Date.now() / 1000 - 10 * 60; // Ten minutes ago\r\n\r\n          if (\r\n            lastUpdate &&\r\n            lastUpdate.val &&\r\n            Number(lastUpdate.val) < tenMinutesAgo\r\n          ) {\r\n            adapter.log.debug(\r\n              `[checkStatesJob] Last update for deviceKey ${\r\n                device.deviceKey\r\n              } was at ${new Date(\r\n                Number(lastUpdate),\r\n              )}, checking for pseudo power values!`,\r\n            );\r\n            // State was not updated in the last 10 minutes... set states to 0\r\n            await statesToReset.forEach(async (stateName: string) => {\r\n              await adapter?.setStateAsync(\r\n                device.productKey + \".\" + device.deviceKey + \".\" + stateName,\r\n                0,\r\n                true,\r\n              );\r\n            });\r\n\r\n            // set electricLevel from deviceList\r\n            if (device.electricity) {\r\n              await adapter?.setStateAsync(\r\n                device.productKey + \".\" + device.deviceKey + \".electricLevel\",\r\n                device.electricity,\r\n                true,\r\n              );\r\n            }\r\n          }\r\n        });\r\n      })\r\n      .catch(() => {\r\n        adapter.log?.error(\r\n          \"[checkStatesJob] Retrieving device failedRetrieving device failed!\",\r\n        );\r\n      });\r\n  });\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,2BAA4B;AAE5B,yBAAkC;AAClC,wBAAqC;AAErC,gCAAkC;AAE3B,MAAM,gCAAgC,OAC3C,YACkB;AAClB,UAAQ,qBAAiB,kCAAY,aAAa,MAAM;AAX1D;AAaI,YAAQ,IAAI,KAAK,yDAAyD;AAE1E,QAAI,QAAQ,YAAY;AACtB,cAAQ,WAAW,IAAI;AACvB,cAAQ,aAAa;AAAA,IACvB;AAEA,QAAI,QAAQ,OAAO,YAAY,QAAQ,OAAO,UAAU;AACtD,yCAAM,OAAO,MAAb,mBAAgB,KAAK,CAAC,iBAAyB;AAC7C,gBAAQ,cAAc;AACtB,gBAAQ,YAAY,oBAAI,KAAK;AAC7B,gBAAQ,YAAY;AAEpB,kDAAkB,OAAO;AAAA,MAC3B;AAAA,IACF;AAGA,qDAAkB,OAAO;AAAA,EAC3B,CAAC;AACH;AAEO,MAAM,sBAAsB,OACjC,YACkB;AAElB,QAAM,gBAA0B;AAAA,IAC9B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,UAAQ,qBAAiB,kCAAY,gBAAgB,YAAY;AAC/D,yCAAc,OAAO,EAClB,KAAK,CAAC,eAA0C;AAC/C,iBAAW,QAAQ,OAAO,WAAoC;AAC5D,cAAM,aAAa,OAAM,mCAAS;AAAA,UAChC,OAAO,aAAa,MAAM,OAAO,YAAY;AAAA;AAG/C,cAAM,gBAAgB,KAAK,IAAI,IAAI,MAAO,KAAK;AAE/C,YACE,cACA,WAAW,OACX,OAAO,WAAW,GAAG,IAAI,eACzB;AACA,kBAAQ,IAAI;AAAA,YACV,8CACE,OAAO,SACT,WAAW,IAAI;AAAA,cACb,OAAO,UAAU;AAAA,YACnB,CAAC;AAAA,UACH;AAEA,gBAAM,cAAc,QAAQ,OAAO,cAAsB;AACvD,mBAAM,mCAAS;AAAA,cACb,OAAO,aAAa,MAAM,OAAO,YAAY,MAAM;AAAA,cACnD;AAAA,cACA;AAAA;AAAA,UAEJ,CAAC;AAGD,cAAI,OAAO,aAAa;AACtB,mBAAM,mCAAS;AAAA,cACb,OAAO,aAAa,MAAM,OAAO,YAAY;AAAA,cAC7C,OAAO;AAAA,cACP;AAAA;AAAA,UAEJ;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH,CAAC,EACA,MAAM,MAAM;AAxFnB;AAyFQ,oBAAQ,QAAR,mBAAa;AAAA,QACX;AAAA;AAAA,IAEJ,CAAC;AAAA,EACL,CAAC;AACH;",
  "names": []
}
