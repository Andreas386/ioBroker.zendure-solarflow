{
  "version": 3,
  "sources": ["../../src/services/mqttService.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/indent */\r\nimport * as mqtt from \"mqtt\";\r\nimport { ZendureSolarflow } from \"../main\";\r\nimport { ISolarFlowDeviceDetails } from \"../models/ISolarFlowDeviceDetails\";\r\nimport { checkVoltage, updateSolarFlowState } from \"./adapterService\";\r\nimport { toHoursAndMinutes } from \"../helpers/timeHelper\";\r\nimport { createSolarFlowStates } from \"../helpers/createSolarFlowStates\";\r\nimport { IPackData } from \"../models/IPackData\";\r\nimport { setEnergyWhMax } from \"./calculationService\";\r\n\r\nlet adapter: ZendureSolarflow | undefined = undefined;\r\n\r\nconst onConnected = (): void => {\r\n  adapter?.log.info(\"[onConnected] Connected with MQTT!\");\r\n};\r\n\r\nconst onError = (error: any): void => {\r\n  adapter?.log.error(\"Connection to MQTT failed! Error: \" + error);\r\n};\r\n\r\nconst onSubscribe: any = (error: Error | null) => {\r\n  if (error) {\r\n    adapter?.log.error(\"Subscription to MQTT failed! Error: \" + error);\r\n  } else {\r\n    adapter?.log.debug(\"Subscription successful!\");\r\n  }\r\n};\r\n\r\nexport const addOrUpdatePackData = async (\r\n  adapter: ZendureSolarflow,\r\n  productKey: string,\r\n  deviceKey: string,\r\n  packData: IPackData[],\r\n): Promise<void> => {\r\n  await packData.forEach(async (x) => {\r\n    // Process data only with a serial id!\r\n    if (x.sn) {\r\n      // create a state for the serial id\r\n      const key = (productKey + \".\" + deviceKey + \".packData.\" + x.sn).replace(\r\n        adapter.FORBIDDEN_CHARS,\r\n        \"\",\r\n      );\r\n\r\n      await adapter?.extendObjectAsync(key + \".sn\", {\r\n        type: \"state\",\r\n        common: {\r\n          name: {\r\n            de: \"Seriennummer\",\r\n            en: \"Serial id\",\r\n          },\r\n          type: \"string\",\r\n          desc: \"Serial ID\",\r\n          role: \"value\",\r\n          read: true,\r\n          write: false,\r\n        },\r\n        native: {},\r\n      });\r\n\r\n      await adapter?.setStateAsync(key + \".sn\", x.sn, true);\r\n\r\n      if (x.socLevel) {\r\n        // State f\u00FCr socLevel\r\n        await adapter?.extendObjectAsync(key + \".socLevel\", {\r\n          type: \"state\",\r\n          common: {\r\n            name: {\r\n              de: \"SOC der Batterie\",\r\n              en: \"soc of battery\",\r\n            },\r\n            type: \"number\",\r\n            desc: \"SOC Level\",\r\n            role: \"value\",\r\n            read: true,\r\n            write: false,\r\n          },\r\n          native: {},\r\n        });\r\n\r\n        await adapter?.setStateAsync(key + \".socLevel\", x.socLevel, true);\r\n      }\r\n\r\n      if (x.maxTemp) {\r\n        // State f\u00FCr maxTemp\r\n        await adapter?.extendObjectAsync(key + \".maxTemp\", {\r\n          type: \"state\",\r\n          common: {\r\n            name: {\r\n              de: \"Max. Temperatur der Batterie\",\r\n              en: \"max temp. of battery\",\r\n            },\r\n            type: \"number\",\r\n            desc: \"Max. Temp\",\r\n            role: \"value\",\r\n            read: true,\r\n            write: false,\r\n          },\r\n          native: {},\r\n        });\r\n\r\n        // Convert Kelvin to Celsius\r\n        await adapter?.setStateAsync(\r\n          key + \".maxTemp\",\r\n          x.maxTemp / 10 - 273.15,\r\n          true,\r\n        );\r\n      }\r\n\r\n      if (x.minVol) {\r\n        await adapter?.extendObjectAsync(key + \".minVol\", {\r\n          type: \"state\",\r\n          common: {\r\n            name: \"minVol\",\r\n            type: \"number\",\r\n            desc: \"minVol\",\r\n            role: \"value\",\r\n            read: true,\r\n            write: false,\r\n          },\r\n          native: {},\r\n        });\r\n\r\n        await adapter?.setStateAsync(key + \".minVol\", x.minVol / 100, true);\r\n      }\r\n\r\n      if (x.maxVol) {\r\n        await adapter?.extendObjectAsync(key + \".maxVol\", {\r\n          type: \"state\",\r\n          common: {\r\n            name: \"maxVol\",\r\n            type: \"number\",\r\n            desc: \"maxVol\",\r\n            role: \"value\",\r\n            read: true,\r\n            write: false,\r\n          },\r\n          native: {},\r\n        });\r\n\r\n        await adapter?.setStateAsync(key + \".maxVol\", x.maxVol / 100, true);\r\n      }\r\n\r\n      if (x.totalVol) {\r\n        await adapter?.extendObjectAsync(key + \".totalVol\", {\r\n          type: \"state\",\r\n          common: {\r\n            name: \"totalVol\",\r\n            type: \"number\",\r\n            desc: \"totalVol\",\r\n            role: \"value\",\r\n            read: true,\r\n            write: false,\r\n          },\r\n          native: {},\r\n        });\r\n\r\n        const totalVol = x.totalVol / 100;\r\n\r\n        await adapter?.setStateAsync(key + \".totalVol\", totalVol, true);\r\n\r\n        // Send Voltage to checkVoltage Method\r\n        checkVoltage(adapter, productKey, deviceKey, totalVol);\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nconst onMessage = async (topic: string, message: Buffer): Promise<void> => {\r\n  //adapter?.log.info(message.toString())\r\n  if (adapter) {\r\n    const splitted = topic.split(\"/\");\r\n    const productKey = splitted[1];\r\n    const deviceKey = splitted[2];\r\n\r\n    const obj = JSON.parse(message.toString());\r\n\r\n    // lastUpdate f\u00FCr den deviceKey setzen\r\n    updateSolarFlowState(\r\n      adapter,\r\n      productKey,\r\n      deviceKey,\r\n      \"lastUpdate\",\r\n      new Date().getTime(),\r\n    );\r\n\r\n    if (\r\n      obj.properties?.electricLevel != null &&\r\n      obj.properties?.electricLevel != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"electricLevel\",\r\n        obj.properties.electricLevel,\r\n      );\r\n\r\n      if (adapter?.config.useCalculation && obj.properties.electricLevel == 100) {\r\n        setEnergyWhMax(adapter, productKey, deviceKey);\r\n      }\r\n    }\r\n\r\n    if (\r\n      obj.properties?.outputHomePower != null &&\r\n      obj.properties?.outputHomePower != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"outputHomePower\",\r\n        obj.properties.outputHomePower,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.outputLimit != null &&\r\n      obj.properties?.outputLimit != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"outputLimit\",\r\n        obj.properties.outputLimit,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.outputPackPower != null &&\r\n      obj.properties?.outputPackPower != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"outputPackPower\",\r\n        obj.properties.outputPackPower,\r\n      );\r\n\r\n      // if outPutPackPower set packInputPower to 0\r\n      updateSolarFlowState(adapter, productKey, deviceKey, \"packInputPower\", 0);\r\n    }\r\n\r\n    if (\r\n      obj.properties?.packInputPower != null &&\r\n      obj.properties?.packInputPower != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"packInputPower\",\r\n        obj.properties.packInputPower,\r\n      );\r\n\r\n      // if packInputPower set outputPackPower to 0\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"outputPackPower\",\r\n        0,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.solarInputPower != null &&\r\n      obj.properties?.solarInputPower != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"solarInputPower\",\r\n        obj.properties.solarInputPower,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.pvPower1 != null &&\r\n      obj.properties?.pvPower1 != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"pvPower2\", // Reversed to adjust like offical app\r\n        obj.properties.pvPower1,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.pvPower2 != null &&\r\n      obj.properties?.pvPower2 != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"pvPower1\", // Reversed to adjust like offical app\r\n        obj.properties.pvPower2,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.solarPower1 != null &&\r\n      obj.properties?.solarPower1 != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"pvPower1\",\r\n        obj.properties.solarPower1,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.solarPower2 != null &&\r\n      obj.properties?.solarPower2 != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"pvPower2\",\r\n        obj.properties.solarPower2,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.remainOutTime != null &&\r\n      obj.properties?.remainOutTime != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"remainOutTime\",\r\n        obj.properties.remainOutTime,\r\n      );\r\n\r\n      // If Adapter calucation is used, calculate in and outtime\r\n      if (adapter.config.useCalculation) {\r\n        // Zendure use the same state for input und output values, if charging set remainInputTime, else remainOutTime\r\n        const packInputPower = Number(\r\n          (\r\n            await adapter.getStateAsync(\r\n              productKey + \".\" + deviceKey + \".packInputPower\",\r\n            )\r\n          )?.val,\r\n        );\r\n        const outputPackPower = Number(\r\n          (\r\n            await adapter.getStateAsync(\r\n              productKey + \".\" + deviceKey + \".outputPackPower\",\r\n            )\r\n          )?.val,\r\n        );\r\n\r\n        if (packInputPower && packInputPower > 0) {\r\n          // Calculate minutes to format hh:mm\r\n          updateSolarFlowState(\r\n            adapter,\r\n            productKey,\r\n            deviceKey,\r\n            \"calculations.remainOutTime\",\r\n            obj.properties.remainOutTime < 59940\r\n              ? toHoursAndMinutes(obj.properties.remainOutTime)\r\n              : \"\",\r\n          );\r\n\r\n          // Set remainInputTime to blank\r\n          updateSolarFlowState(\r\n            adapter,\r\n            productKey,\r\n            deviceKey,\r\n            \"calculations.remainInputTime\",\r\n            \"\",\r\n          );\r\n        } else if (outputPackPower && outputPackPower > 0) {\r\n          // Calculate minutes to format hh:mm\r\n          updateSolarFlowState(\r\n            adapter,\r\n            productKey,\r\n            deviceKey,\r\n            \"calculations.remainInputTime\",\r\n            obj.properties.remainInputTime < 59940\r\n              ? toHoursAndMinutes(obj.properties.remainInputTime)\r\n              : \"\",\r\n          );\r\n\r\n          // Set remainOutTime to blank\r\n          updateSolarFlowState(\r\n            adapter,\r\n            productKey,\r\n            deviceKey,\r\n            \"calculations.remainOutTime\",\r\n            \"\",\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    if (obj.properties?.socSet != null && obj.properties?.socSet != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"socSet\",\r\n        Number(obj.properties.socSet) / 10,\r\n      );\r\n    }\r\n\r\n    if (obj.properties?.minSoc != null && obj.properties?.minSoc != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"minSoc\",\r\n        Number(obj.properties.minSoc) / 10,\r\n      );\r\n    }\r\n\r\n    if (obj.packData) {\r\n      addOrUpdatePackData(adapter, productKey, deviceKey, obj.packData);\r\n    }\r\n  }\r\n\r\n  if (adapter?.mqttClient) {\r\n    //client.end();\r\n  }\r\n};\r\n\r\nexport const setChargeLimit = async (\r\n  adapter: ZendureSolarflow,\r\n  productKey: string,\r\n  deviceKey: string,\r\n  socSet: number,\r\n): Promise<void> => {\r\n  if (adapter.mqttClient && productKey && deviceKey) {\r\n    if (socSet > 40 && socSet <= 100) {\r\n      const topic = `iot/${productKey}/${deviceKey}/properties/write`;\r\n\r\n      const socSetLimit = { properties: { socSet: socSet * 10 } };\r\n      adapter.log.debug(\r\n        `[setChargeLimit] Setting ChargeLimit for device key ${deviceKey} to ${socSet}!`,\r\n      );\r\n      adapter.mqttClient?.publish(topic, JSON.stringify(socSetLimit));\r\n    } else {\r\n      adapter.log.debug(\r\n        `[setChargeLimit] Charge limit is not in range 40<>100!`,\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nexport const setDischargeLimit = async (\r\n  adapter: ZendureSolarflow,\r\n  productKey: string,\r\n  deviceKey: string,\r\n  minSoc: number,\r\n): Promise<void> => {\r\n  if (adapter.mqttClient && productKey && deviceKey) {\r\n    if (minSoc > 0 && minSoc < 90) {\r\n      const topic = `iot/${productKey}/${deviceKey}/properties/write`;\r\n\r\n      const socSetLimit = { properties: { minSoc: minSoc * 10 } };\r\n      adapter.log.debug(\r\n        `[setDischargeLimit] Setting Discharge Limit for device key ${deviceKey} to ${minSoc}!`,\r\n      );\r\n      adapter.mqttClient?.publish(topic, JSON.stringify(socSetLimit));\r\n    } else {\r\n      adapter.log.debug(\r\n        `[setDischargeLimit] Discharge limit is not in range 0<>90!`,\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nexport const setOutputLimit = async (\r\n  adapter: ZendureSolarflow,\r\n  productKey: string,\r\n  deviceKey: string,\r\n  limit: number,\r\n): Promise<void> => {\r\n  if (adapter.mqttClient && productKey && deviceKey) {\r\n    if (adapter.config.useLowVoltageBlock) {\r\n      const lowVoltageBlockState = await adapter.getStateAsync(\r\n        productKey + \".\" + deviceKey + \".control.lowVoltageBlock\",\r\n      );\r\n      if (\r\n        lowVoltageBlockState &&\r\n        lowVoltageBlockState.val &&\r\n        lowVoltageBlockState.val == true\r\n      ) {\r\n        limit = 0;\r\n      }\r\n    }\r\n\r\n    // Das Limit kann unter 100 nur in 30er Schritten gesetzt werden, dH. 30/60/90/100, wir rechnen das also um\r\n    const currentLimit = (\r\n      await adapter.getStateAsync(productKey + \".\" + deviceKey + \".outputLimit\")\r\n    )?.val;\r\n\r\n    if (currentLimit != null && currentLimit != undefined) {\r\n      if (currentLimit != limit) {\r\n        if (\r\n          limit < 100 &&\r\n          limit != 90 &&\r\n          limit != 60 &&\r\n          limit != 30 &&\r\n          limit != 0\r\n        ) {\r\n          if (limit < 100 && limit > 90) {\r\n            limit = 90;\r\n          } else if (limit < 90 && limit > 60) {\r\n            limit = 60;\r\n          } else if (limit < 60 && limit > 30) {\r\n            limit = 30;\r\n          } else if (limit < 30) {\r\n            limit = 30;\r\n          }\r\n        }\r\n\r\n        // 'iot/{auth.productKey}/{auth.deviceKey}/properties/write' == Topic? Oder productKey,deviceKey aus Device Details?\r\n        const topic = `iot/${productKey}/${deviceKey}/properties/write`;\r\n\r\n        const outputlimit = { properties: { outputLimit: limit } };\r\n        adapter.log.debug(\r\n          `[setOutputLimit] Setting Output Limit for device key ${deviceKey} to ${limit}!`,\r\n        );\r\n        adapter.mqttClient?.publish(topic, JSON.stringify(outputlimit));\r\n      } else {\r\n        adapter.log.debug(\r\n          `[setOutputLimit] Output Limit for device key ${deviceKey} is already at ${limit}!`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const connectMqttClient = (_adapter: ZendureSolarflow): void => {\r\n  adapter = _adapter;\r\n\r\n  const options: mqtt.IClientOptions = {\r\n    clientId: adapter.accessToken,\r\n    username: \"zenApp\",\r\n    password:\r\n      adapter.config.server && adapter.config.server == \"eu\"\r\n        ? \"H6s$j9CtNa0N\"\r\n        : \"oK#PCgy6OZxd\",\r\n    clean: true,\r\n    protocolVersion: 5,\r\n  };\r\n\r\n  if (mqtt && adapter && adapter.paths && adapter.deviceList) {\r\n    adapter.log.debug(\"[connectMqttClient] Connecting to MQTT client...\");\r\n    adapter.mqttClient = mqtt.connect(\r\n      \"mqtt://\" + adapter.paths.mqttUrl + \":\" + adapter.paths.mqttPort,\r\n      options,\r\n    ); // create a client\r\n\r\n    if (adapter && adapter.mqttClient) {\r\n      adapter.mqttClient.on(\"connect\", onConnected);\r\n      adapter.mqttClient.on(\"error\", onError);\r\n\r\n      adapter.log.debug(\r\n        `[connectMqttClient] Found ${adapter.deviceList.length} SolarFlow devices.`,\r\n      );\r\n\r\n      // Subscribe to Topic (appkey von Zendure)\r\n      adapter.deviceList.forEach((device: ISolarFlowDeviceDetails) => {\r\n        // States erstellen\r\n        if (adapter) {\r\n          createSolarFlowStates(adapter, device.productKey, device.deviceKey);\r\n\r\n          // Set electricLevel (soc) from device details.\r\n          updateSolarFlowState(\r\n            adapter,\r\n            device.productKey,\r\n            device.deviceKey,\r\n            \"electricLevel\",\r\n            device.electricity,\r\n          );\r\n\r\n          const reportTopic = `/${device.productKey}/${device.deviceKey}/properties/report`;\r\n          const iotTopic = `iot/${device.productKey}/${device.deviceKey}/#`;\r\n\r\n          adapter.log.debug(\r\n            `[connectMqttClient] Subscribing to MQTT Topic: ${reportTopic}`,\r\n          );\r\n          adapter.mqttClient?.subscribe(reportTopic, onSubscribe);\r\n          adapter.log.debug(\r\n            `[connectMqttClient] Subscribing to MQTT Topic: ${iotTopic}`,\r\n          );\r\n          adapter.mqttClient?.subscribe(iotTopic, onSubscribe);\r\n        }\r\n      });\r\n\r\n      adapter.mqttClient.on(\"message\", onMessage);\r\n    }\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": ["adapter"]
}
