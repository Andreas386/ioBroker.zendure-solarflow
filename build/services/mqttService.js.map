{
  "version": 3,
  "sources": ["../../src/services/mqttService.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/indent */\r\nimport { MqttClient } from \"mqtt\";\r\nimport * as mqtt from \"mqtt\";\r\nimport { ZendureSolarflow } from \"../main\";\r\nimport { ISolarFlowDeviceDetails } from \"../models/ISolarFlowDeviceDetails\";\r\nimport { addOrUpdatePackData, createSolarFlowStates, updateSolarFlowState } from \"./adapterService\";\r\n\r\nlet client: MqttClient | undefined = undefined;\r\nlet adapter: ZendureSolarflow | undefined = undefined;\r\n\r\nconst onConnected = (): void => {\r\n  adapter?.log.info(\"Connected with MQTT!\");\r\n};\r\n\r\nconst onError = (error: any): void => {\r\n  adapter?.log.error(\"Connection to MQTT failed! Error: \" + error);\r\n};\r\n\r\nconst onSubscribe: any = (error: Error | null) => {\r\n  if (error) {\r\n    adapter?.log.error(\"Subscription to MQTT failed! Error: \" + error);\r\n  } else {\r\n    adapter?.log.debug(\"Subscription successful!\");\r\n  }\r\n};\r\n\r\nconst onMessage = async (topic: string, message: Buffer): Promise<void> => {\r\n  //adapter?.log.info(message.toString())\r\n  if (adapter) {\r\n    const splitted = topic.split(\"/\");\r\n    const productKey = splitted[1];\r\n    const deviceKey = splitted[2];\r\n\r\n    const obj = JSON.parse(message.toString());\r\n\r\n    // lastUpdate f\u00FCr den deviceKey setzen\r\n    updateSolarFlowState(\r\n      adapter,\r\n      productKey,\r\n      deviceKey,\r\n      \"lastUpdate\",\r\n      new Date().getTime(),\r\n    );\r\n\r\n    if (\r\n      obj.properties?.electricLevel != null &&\r\n      obj.properties?.electricLevel != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"electricLevel\",\r\n        obj.properties.electricLevel,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.outputHomePower != null &&\r\n      obj.properties?.outputHomePower != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"outputHomePower\",\r\n        obj.properties.outputHomePower,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.outputLimit != null &&\r\n      obj.properties?.outputLimit != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"outputLimit\",\r\n        obj.properties.outputLimit,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.outputPackPower != null &&\r\n      obj.properties?.outputPackPower != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"outputPackPower\",\r\n        obj.properties.outputPackPower,\r\n      );\r\n\r\n      // if outPutPackPower set packInputPower to 0\r\n      updateSolarFlowState(adapter, productKey, deviceKey, \"packInputPower\", 0);\r\n    }\r\n\r\n    if (\r\n      obj.properties?.packInputPower != null &&\r\n      obj.properties?.packInputPower != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"packInputPower\",\r\n        obj.properties.packInputPower,\r\n      );\r\n\r\n      // if packInputPower set outputPackPower to 0\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"outputPackPower\",\r\n        0,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.solarInputPower != null &&\r\n      obj.properties?.solarInputPower != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"solarInputPower\",\r\n        obj.properties.solarInputPower,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.pvPower1 != null &&\r\n      obj.properties?.pvPower1 != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"pvPower1\",\r\n        obj.properties.pvPower1,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.pvPower2 != null &&\r\n      obj.properties?.pvPower2 != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"pvPower2\",\r\n        obj.properties.pvPower2,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.remainInputTime != null &&\r\n      obj.properties?.remainInputTime != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"remainInputTime\",\r\n        obj.properties.remainInputTime,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.remainOutTime != null &&\r\n      obj.properties?.remainOutTime != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"remainOutTime\",\r\n        obj.properties.remainOutTime,\r\n      );\r\n    }\r\n\r\n    if (obj.properties?.socSet != null && obj.properties?.socSet != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"socSet\",\r\n        Number(obj.properties.socSet) / 10,\r\n      );\r\n    }\r\n\r\n    if (obj.properties?.minSoc != null && obj.properties?.minSoc != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"minSoc\",\r\n        Number(obj.properties.minSoc) / 10,\r\n      );\r\n    }\r\n\r\n    if (obj.packData) {\r\n      addOrUpdatePackData(adapter, productKey, deviceKey, obj.packData);\r\n    }\r\n  }\r\n\r\n  if (client) {\r\n    //client.end();\r\n  }\r\n};\r\n\r\nexport const setChargeLimit = async (\r\n  adapter: ZendureSolarflow,\r\n  productKey: string,\r\n  deviceKey: string,\r\n  socSet: number,\r\n): Promise<void> => {\r\n  if (client && productKey && deviceKey) {\r\n    if (socSet > 40 && socSet <= 100) {\r\n      const topic = `iot/${productKey}/${deviceKey}/properties/write`;\r\n\r\n      const socSetLimit = { properties: { socSet: socSet * 10 } };\r\n      adapter.log.debug(\r\n        `Setting ChargeLimit for device key ${deviceKey} to ${socSet}!`,\r\n      );\r\n      client?.publish(topic, JSON.stringify(socSetLimit));\r\n    }\r\n    else {\r\n      adapter.log.debug(\r\n        `Charge limit is not in range 40<>100!`,\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nexport const setDischargeLimit = async (\r\n  adapter: ZendureSolarflow,\r\n  productKey: string,\r\n  deviceKey: string,\r\n  minSoc: number,\r\n): Promise<void> => {\r\n  if (client && productKey && deviceKey) {\r\n    if (minSoc > 0 && minSoc < 90) {\r\n      const topic = `iot/${productKey}/${deviceKey}/properties/write`;\r\n\r\n      const socSetLimit = { properties: { minSoc: minSoc * 10 } };\r\n      adapter.log.debug(\r\n        `Setting Discharge Limit for device key ${deviceKey} to ${minSoc}!`,\r\n      );\r\n      client?.publish(topic, JSON.stringify(socSetLimit));\r\n    }\r\n    else{\r\n      adapter.log.debug(\r\n        `Discharge limit is not in range 0<>90!`,\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nexport const setOutputLimit = async (\r\n  adapter: ZendureSolarflow,\r\n  productKey: string,\r\n  deviceKey: string,\r\n  limit: number,\r\n): Promise<void> => {\r\n  if (client && productKey && deviceKey) {\r\n    // Das Limit kann unter 100 nur in 30er Schritten gesetzt werden, dH. 30/60/90/100, wir rechnen das also um\r\n    const currentLimit = (\r\n      await adapter.getStateAsync(productKey + \".\" + deviceKey + \".outputLimit\")\r\n    )?.val;\r\n\r\n    if (currentLimit != null && currentLimit != undefined) {\r\n      if (currentLimit != limit) {\r\n        if (\r\n          limit < 100 &&\r\n          limit != 90 &&\r\n          limit != 60 &&\r\n          limit != 30 &&\r\n          limit != 0\r\n        ) {\r\n          if (limit < 100 && limit > 90) {\r\n            limit = 90;\r\n          } else if (limit < 90 && limit > 60) {\r\n            limit = 60;\r\n          } else if (limit < 60 && limit > 30) {\r\n            limit = 30;\r\n          } else if (limit < 30) {\r\n            limit = 30;\r\n          }\r\n        }\r\n\r\n        // 'iot/{auth.productKey}/{auth.deviceKey}/properties/write' == Topic? Oder productKey,deviceKey aus Device Details?\r\n        const topic = `iot/${productKey}/${deviceKey}/properties/write`;\r\n\r\n        const outputlimit = { properties: { outputLimit: limit } };\r\n        adapter.log.debug(\r\n          `Setting Output Limit for device key ${deviceKey} to ${limit}!`,\r\n        );\r\n        client?.publish(topic, JSON.stringify(outputlimit));\r\n      } else {\r\n        adapter.log.debug(\r\n          `Output Limit for device key ${deviceKey} is already at ${limit}!`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const connectMqttClient = (_adapter: ZendureSolarflow): void => {\r\n  adapter = _adapter;\r\n\r\n  const options: mqtt.IClientOptions = {\r\n    clientId: adapter.accessToken,\r\n    username: \"zenApp\",\r\n    password: \"oK#PCgy6OZxd\",\r\n    clean: true,\r\n    protocolVersion: 5,\r\n  };\r\n\r\n  if (mqtt && adapter && adapter.paths) {\r\n    client = mqtt.connect(\r\n      \"mqtt://\" + adapter.paths.mqttUrl + \":\" + adapter.paths.mqttPort,\r\n      options,\r\n    ); // create a client\r\n\r\n    if (client && adapter) {\r\n      client.on(\"connect\", onConnected);\r\n      client.on(\"error\", onError);\r\n\r\n      // Subscribe to Topic (appkey von Zendure)\r\n      adapter.deviceList.forEach((device: ISolarFlowDeviceDetails) => {\r\n        // States erstellen\r\n        if (adapter) {\r\n          createSolarFlowStates(adapter, device.productKey, device.deviceKey);\r\n\r\n          // Set electricLevel (soc) from device details.\r\n          updateSolarFlowState(\r\n            adapter,\r\n            device.productKey,\r\n            device.deviceKey,\r\n            \"electricLevel\",\r\n            device.electricity,\r\n          );\r\n\r\n          const reportTopic = `/${device.productKey}/${device.deviceKey}/properties/report`;\r\n          const iotTopic = `iot/${device.productKey}/${device.deviceKey}/#`;\r\n\r\n          adapter.log.debug(`Subscribing to MQTT Topic: ${reportTopic}`);\r\n          client?.subscribe(reportTopic, onSubscribe);\r\n          adapter.log.debug(`Subscribing to MQTT Topic: ${iotTopic}`);\r\n          client?.subscribe(iotTopic, onSubscribe);\r\n        }\r\n      });\r\n\r\n      client.on(\"message\", onMessage);\r\n    }\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": ["adapter"]
}
