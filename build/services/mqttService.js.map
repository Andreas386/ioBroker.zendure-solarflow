{
  "version": 3,
  "sources": ["../../src/services/mqttService.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/indent */\r\nimport { MqttClient } from \"mqtt\";\r\nimport * as mqtt from \"mqtt\";\r\nimport { ZendureSolarflow } from \"../main\";\r\nimport { ISolarFlowDeviceDetails } from \"../models/ISolarFlowDeviceDetails\";\r\nimport { createSolarFlowStates, updateSolarFlowState } from \"./adapterService\";\r\n\r\nlet client: MqttClient | undefined = undefined;\r\nlet adapter: ZendureSolarflow | undefined = undefined;\r\n\r\nconst onConnected = () => {\r\n  adapter?.log.info(\"Connected with MQTT!\");\r\n};\r\n\r\nconst onError = (error: any) => {\r\n  adapter?.log.error(\"Connection to MQTT failed! Error: \" + error);\r\n};\r\n\r\nconst onSubscribe = (err: Error | null) => {\r\n  if (err) {\r\n    adapter?.log.error(\"Subscription to MQTT failed! Error: \" + err);\r\n  } else {\r\n    adapter?.log.info(\"Subscription successful!\");\r\n  }\r\n};\r\n\r\nconst onMessage = async (topic: string, message: Buffer) => {\r\n  if (adapter) {\r\n    const splitted = topic.split(\"/\");\r\n    const productKey = splitted[1];\r\n    const deviceKey = splitted[2];\r\n\r\n    const obj = JSON.parse(message.toString());\r\n\r\n    if (\r\n      obj.properties?.electricLevel != null &&\r\n      obj.properties?.electricLevel != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"electricLevel\",\r\n        obj.properties.electricLevel,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.outputHomePower != null &&\r\n      obj.properties?.outputHomePower != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"outputHomePower\",\r\n        obj.properties.outputHomePower,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.outputLimit != null &&\r\n      obj.properties?.outputLimit != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"outputLimit\",\r\n        obj.properties.outputLimit,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.outputPackPower != null &&\r\n      obj.properties?.outputPackPower != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"outputPackPower\",\r\n        obj.properties.outputPackPower,\r\n      );\r\n\r\n      // if outPutPackPower set packInputPower to 0\r\n      updateSolarFlowState(adapter, productKey, deviceKey, \"packInputPower\", 0);\r\n    }\r\n\r\n    if (\r\n      obj.properties?.packInputPower != null &&\r\n      obj.properties?.packInputPower != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"packInputPower\",\r\n        obj.properties.packInputPower,\r\n      );\r\n\r\n      // if packInputPower set outputPackPower to 0\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"outputPackPower\",\r\n        0,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.solarInputPower != null &&\r\n      obj.properties?.solarInputPower != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"solarInputPower\",\r\n        obj.properties.solarInputPower,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.remainInputTime != null &&\r\n      obj.properties?.remainInputTime != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"remainInputTime\",\r\n        obj.properties.remainInputTime,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.remainOutTime != null &&\r\n      obj.properties?.remainOutTime != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"remainOutTime\",\r\n        obj.properties.remainOutTime,\r\n      );\r\n    }\r\n\r\n    if (obj.properties?.socSet != null && obj.properties?.socSet != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"socSet\",\r\n        Number(obj.properties.socSet) / 10,\r\n      );\r\n    }\r\n\r\n    if (obj.properties?.minSoc != null && obj.properties?.minSoc != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"minSoc\",\r\n        Number(obj.properties.minSoc) / 10,\r\n      );\r\n    }\r\n\r\n    if (obj.packData) {\r\n      console.log(obj.packData);\r\n    }\r\n  }\r\n\r\n  if (client) {\r\n    //client.end();\r\n  }\r\n};\r\n\r\nexport const setOutputLimit = (\r\n  adapter: ZendureSolarflow,\r\n  productKey: string,\r\n  deviceKey: string,\r\n  limit: number,\r\n) => {\r\n  if (client && productKey && deviceKey) {\r\n    // Das Limit kann unter 100 nur in 30er Schritten gesetzt werden, dH. 30/60/90/100, wir rechnen das also um\r\n    if (\r\n      limit < 100 &&\r\n      limit != 90 &&\r\n      limit != 60 &&\r\n      limit != 30 &&\r\n      limit != 0\r\n    ) {\r\n      if (limit < 100 && limit > 90) {\r\n        limit = 90;\r\n      } else if (limit < 90 && limit > 60) {\r\n        limit = 60;\r\n      } else if (limit < 60 && limit > 30) {\r\n        limit = 30;\r\n      } else if (limit < 30) {\r\n        limit = 30;\r\n      }\r\n    }\r\n\r\n    // 'iot/{auth.productKey}/{auth.deviceKey}/properties/write' == Topic? Oder productKey,deviceKey aus Device Details?\r\n    const topic = `iot/${productKey}/${deviceKey}/properties/write`;\r\n\r\n    const outputlimit = { properties: { outputLimit: limit } };\r\n    adapter.log.info(\r\n      `Setting Output Limit for device key ${deviceKey} to ${limit}!`,\r\n    );\r\n    client?.publish(topic, JSON.stringify(outputlimit));\r\n  }\r\n};\r\n\r\nexport const connectMqttClient = (_adapter: ZendureSolarflow) => {\r\n  adapter = _adapter;\r\n\r\n  const options: mqtt.IClientOptions = {\r\n    clientId: adapter.accessToken,\r\n    username: \"zenApp\",\r\n    password: \"oK#PCgy6OZxd\",\r\n    clean: true,\r\n    protocolVersion: 5,\r\n  };\r\n\r\n  if (mqtt && adapter && adapter.paths) {\r\n    client = mqtt.connect(\r\n      \"mqtt://\" + adapter.paths.mqttUrl + \":\" + adapter.paths.mqttPort,\r\n      options,\r\n    ); // create a client\r\n\r\n    if (client && adapter) {\r\n      client.on(\"connect\", onConnected);\r\n      client.on(\"error\", onError);\r\n\r\n      // Subscribe to Topic (appkey von Zendure)\r\n      adapter.deviceList.forEach((device: ISolarFlowDeviceDetails) => {\r\n        // States erstellen\r\n        if (adapter) {\r\n          createSolarFlowStates(adapter, device.productKey, device.deviceKey);\r\n          console.log(\r\n            \"Subscribing to: \" + device.productKey + \"/\" + device.deviceKey,\r\n          );\r\n          const report_topic = `/${device.productKey}/${device.deviceKey}/properties/report`;\r\n          const iot_topic = `iot/${device.productKey}/${device.deviceKey}/#`;\r\n          client?.subscribe(report_topic, onSubscribe);\r\n          client?.subscribe(iot_topic, onSubscribe);\r\n        }\r\n      });\r\n\r\n      client.on(\"message\", onMessage);\r\n    }\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": ["adapter"]
}
