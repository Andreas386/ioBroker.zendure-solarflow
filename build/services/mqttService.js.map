{
  "version": 3,
  "sources": ["../../src/services/mqttService.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/indent */\r\nimport * as mqtt from \"mqtt\";\r\nimport { ZendureSolarflow } from \"../main\";\r\nimport { ISolarFlowDeviceDetails } from \"../models/ISolarFlowDeviceDetails\";\r\nimport {\r\n  checkVoltage,\r\n  updateSolarFlowControlState,\r\n  updateSolarFlowState,\r\n} from \"./adapterService\";\r\nimport { IPackData } from \"../models/IPackData\";\r\nimport { setEnergyWhMax, setSocToZero } from \"./calculationService\";\r\nimport { IMqttData } from \"../models/ISolarFlowMqttProperties\";\r\nimport { startCalculationJob, startCheckStatesAndConnectionJob, startRefreshAccessTokenTimerJob, startResetValuesJob } from \"./jobSchedule\";\r\n\r\nlet adapter: ZendureSolarflow | undefined = undefined;\r\n\r\nexport const addOrUpdatePackData = async (\r\n  productKey: string,\r\n  deviceKey: string,\r\n  packData: IPackData[],\r\n): Promise<void> => {\r\n  if (adapter && productKey && deviceKey) {\r\n    await packData.forEach(async (x) => {\r\n      // Process data only with a serial id!\r\n      if (x.sn && adapter) {\r\n        // create a state for the serial id\r\n        const key = (\r\n          productKey +\r\n          \".\" +\r\n          deviceKey +\r\n          \".packData.\" +\r\n          x.sn\r\n        ).replace(adapter.FORBIDDEN_CHARS, \"\");\r\n\r\n        await adapter?.extendObjectAsync(key + \".sn\", {\r\n          type: \"state\",\r\n          common: {\r\n            name: {\r\n              de: \"Seriennummer\",\r\n              en: \"Serial id\",\r\n            },\r\n            type: \"string\",\r\n            desc: \"Serial ID\",\r\n            role: \"value\",\r\n            read: true,\r\n            write: false,\r\n          },\r\n          native: {},\r\n        });\r\n\r\n        await adapter?.setStateAsync(key + \".sn\", x.sn, true);\r\n\r\n        if (x.socLevel) {\r\n          // State f\u00FCr socLevel\r\n          await adapter?.extendObjectAsync(key + \".socLevel\", {\r\n            type: \"state\",\r\n            common: {\r\n              name: {\r\n                de: \"SOC der Batterie\",\r\n                en: \"soc of battery\",\r\n              },\r\n              type: \"number\",\r\n              desc: \"SOC Level\",\r\n              role: \"value\",\r\n              read: true,\r\n              write: false,\r\n            },\r\n            native: {},\r\n          });\r\n\r\n          await adapter?.setStateAsync(key + \".socLevel\", x.socLevel, true);\r\n        }\r\n\r\n        if (x.maxTemp) {\r\n          // State f\u00FCr maxTemp\r\n          await adapter?.extendObjectAsync(key + \".maxTemp\", {\r\n            type: \"state\",\r\n            common: {\r\n              name: {\r\n                de: \"Max. Temperatur der Batterie\",\r\n                en: \"max temp. of battery\",\r\n              },\r\n              type: \"number\",\r\n              desc: \"Max. Temp\",\r\n              role: \"value\",\r\n              read: true,\r\n              write: false,\r\n            },\r\n            native: {},\r\n          });\r\n\r\n          // Convert Kelvin to Celsius\r\n          await adapter?.setStateAsync(\r\n            key + \".maxTemp\",\r\n            x.maxTemp / 10 - 273.15,\r\n            true,\r\n          );\r\n        }\r\n\r\n        if (x.minVol) {\r\n          await adapter?.extendObjectAsync(key + \".minVol\", {\r\n            type: \"state\",\r\n            common: {\r\n              name: \"minVol\",\r\n              type: \"number\",\r\n              desc: \"minVol\",\r\n              role: \"value\",\r\n              read: true,\r\n              write: false,\r\n            },\r\n            native: {},\r\n          });\r\n\r\n          await adapter?.setStateAsync(key + \".minVol\", x.minVol / 100, true);\r\n        }\r\n\r\n        if (x.maxVol) {\r\n          await adapter?.extendObjectAsync(key + \".maxVol\", {\r\n            type: \"state\",\r\n            common: {\r\n              name: \"maxVol\",\r\n              type: \"number\",\r\n              desc: \"maxVol\",\r\n              role: \"value\",\r\n              read: true,\r\n              write: false,\r\n            },\r\n            native: {},\r\n          });\r\n\r\n          await adapter?.setStateAsync(key + \".maxVol\", x.maxVol / 100, true);\r\n        }\r\n\r\n        if (x.totalVol) {\r\n          await adapter?.extendObjectAsync(key + \".totalVol\", {\r\n            type: \"state\",\r\n            common: {\r\n              name: \"totalVol\",\r\n              type: \"number\",\r\n              desc: \"totalVol\",\r\n              role: \"value\",\r\n              read: true,\r\n              write: false,\r\n            },\r\n            native: {},\r\n          });\r\n\r\n          const totalVol = x.totalVol / 100;\r\n\r\n          await adapter?.setStateAsync(key + \".totalVol\", totalVol, true);\r\n\r\n          // Send Voltage to checkVoltage Method\r\n          checkVoltage(adapter, productKey, deviceKey, totalVol);\r\n        }\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nconst onMessage = async (topic: string, message: Buffer): Promise<void> => {\r\n  //console.log(message.toString())\r\n  if (adapter) {\r\n    const topicSplitted = topic.split(\"/\");\r\n    const productKey = topicSplitted[1];\r\n    const deviceKey = topicSplitted[2];\r\n\r\n    let obj: IMqttData = {};\r\n    try {\r\n      obj = JSON.parse(message.toString());\r\n    } catch (e) {\r\n      const txt = message.toString();\r\n      adapter.log.error(`[JSON PARSE ERROR] ${txt}`);\r\n    }\r\n\r\n    // set lastUpdate for deviceKey\r\n    updateSolarFlowState(\r\n      adapter,\r\n      productKey,\r\n      deviceKey,\r\n      \"lastUpdate\",\r\n      new Date().getTime(),\r\n    );\r\n\r\n    if (\r\n      obj.properties?.electricLevel != null &&\r\n      obj.properties?.electricLevel != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"electricLevel\",\r\n        obj.properties.electricLevel,\r\n      );\r\n\r\n      if (\r\n        adapter?.config.useCalculation &&\r\n        obj.properties.electricLevel == 100\r\n      ) {\r\n        setEnergyWhMax(adapter, productKey, deviceKey);\r\n      }\r\n\r\n      // if minSoc is reached, set the calculated soc to 0\r\n      const minSoc = await adapter?.getStateAsync(\r\n        `${productKey}.${deviceKey}.minSoc`,\r\n      );\r\n      if (\r\n        adapter?.config.useCalculation &&\r\n        minSoc &&\r\n        minSoc.val &&\r\n        obj.properties.electricLevel <= Number(minSoc.val)\r\n      ) {\r\n        setSocToZero(adapter, productKey, deviceKey);\r\n      }\r\n    }\r\n\r\n    if (\r\n      obj.properties?.packState != null &&\r\n      obj.properties?.packState != undefined\r\n    ) {\r\n      const value =\r\n        obj.properties?.packState == 0\r\n          ? \"Idle\"\r\n          : obj.properties?.packState == 1\r\n          ? \"Charging\"\r\n          : obj.properties?.packState == 2\r\n          ? \"Discharging\"\r\n          : \"Unknown\";\r\n      updateSolarFlowState(adapter, productKey, deviceKey, \"packState\", value);\r\n    }\r\n\r\n    if (\r\n      obj.properties?.passMode != null &&\r\n      obj.properties?.passMode != undefined\r\n    ) {\r\n      const value =\r\n        obj.properties?.passMode == 0\r\n          ? \"Automatic\"\r\n          : obj.properties?.passMode == 1\r\n          ? \"Always off\"\r\n          : obj.properties?.passMode == 2\r\n          ? \"Always on\"\r\n          : \"Unknown\";\r\n      updateSolarFlowState(adapter, productKey, deviceKey, \"passMode\", value);\r\n\r\n      updateSolarFlowControlState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"passMode\",\r\n        obj.properties?.passMode,\r\n      );\r\n    }\r\n\r\n    if (obj.properties?.pass != null && obj.properties?.pass != undefined) {\r\n      const value = obj.properties?.pass == 0 ? false : true;\r\n\r\n      updateSolarFlowState(adapter, productKey, deviceKey, \"pass\", value);\r\n    }\r\n\r\n    if (\r\n      obj.properties?.autoRecover != null &&\r\n      obj.properties?.autoRecover != undefined\r\n    ) {\r\n      const value = obj.properties?.autoRecover == 0 ? false : true;\r\n\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"autoRecover\",\r\n        value,\r\n      );\r\n\r\n      updateSolarFlowControlState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"autoRecover\",\r\n        value,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.outputHomePower != null &&\r\n      obj.properties?.outputHomePower != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"outputHomePower\",\r\n        obj.properties.outputHomePower,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.outputLimit != null &&\r\n      obj.properties?.outputLimit != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"outputLimit\",\r\n        obj.properties.outputLimit,\r\n      );\r\n\r\n      updateSolarFlowControlState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"setOutputLimit\",\r\n        obj.properties.outputLimit,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.buzzerSwitch != null &&\r\n      obj.properties?.buzzerSwitch != undefined\r\n    ) {\r\n      const value = obj.properties?.buzzerSwitch == 0 ? false : true;\r\n\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"buzzerSwitch\",\r\n        value,\r\n      );\r\n\r\n      updateSolarFlowControlState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"buzzerSwitch\",\r\n        value,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.outputPackPower != null &&\r\n      obj.properties?.outputPackPower != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"outputPackPower\",\r\n        obj.properties.outputPackPower,\r\n      );\r\n\r\n      // if outPutPackPower set packInputPower to 0\r\n      updateSolarFlowState(adapter, productKey, deviceKey, \"packInputPower\", 0);\r\n    }\r\n\r\n    if (\r\n      obj.properties?.packInputPower != null &&\r\n      obj.properties?.packInputPower != undefined\r\n    ) {\r\n      let standbyUsage = 0;\r\n\r\n      // Aktuelle Solar-Power abfragen, wenn 0 Standby-Verbrauch dazu rechnen\r\n      const solarInputPower = await adapter?.getStateAsync(\r\n        `${productKey}.${deviceKey}.solarInputPower`,\r\n      );\r\n\r\n      if (solarInputPower && Number(solarInputPower.val) < 10) {\r\n        standbyUsage = 10 - Number(solarInputPower.val);\r\n      }\r\n\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"packInputPower\",\r\n        obj.properties.packInputPower + standbyUsage,\r\n      );\r\n\r\n      // if packInputPower set outputPackPower to 0\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"outputPackPower\",\r\n        0,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.solarInputPower != null &&\r\n      obj.properties?.solarInputPower != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"solarInputPower\",\r\n        obj.properties.solarInputPower,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.pvPower1 != null &&\r\n      obj.properties?.pvPower1 != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"pvPower2\", // Reversed to adjust like offical app\r\n        obj.properties.pvPower1,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.pvPower2 != null &&\r\n      obj.properties?.pvPower2 != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"pvPower1\", // Reversed to adjust like offical app\r\n        obj.properties.pvPower2,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.solarPower1 != null &&\r\n      obj.properties?.solarPower1 != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"pvPower1\",\r\n        obj.properties.solarPower1,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.solarPower2 != null &&\r\n      obj.properties?.solarPower2 != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"pvPower2\",\r\n        obj.properties.solarPower2,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.remainOutTime != null &&\r\n      obj.properties?.remainOutTime != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"remainOutTime\",\r\n        obj.properties.remainOutTime,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.remainInputTime != null &&\r\n      obj.properties?.remainInputTime != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"remainInputTime\",\r\n        obj.properties.remainInputTime,\r\n      );\r\n    }\r\n\r\n    if (obj.properties?.socSet != null && obj.properties?.socSet != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"socSet\",\r\n        Number(obj.properties.socSet) / 10,\r\n      );\r\n\r\n      updateSolarFlowControlState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"chargeLimit\",\r\n        Number(obj.properties.socSet) / 10,\r\n      );\r\n    }\r\n\r\n    if (obj.properties?.minSoc != null && obj.properties?.minSoc != undefined) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"minSoc\",\r\n        Number(obj.properties.minSoc) / 10,\r\n      );\r\n\r\n      updateSolarFlowControlState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"dischargeLimit\",\r\n        Number(obj.properties.minSoc) / 10,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.pvBrand != null &&\r\n      obj.properties?.pvBrand != undefined\r\n    ) {\r\n      const value =\r\n        obj.properties?.pvBrand == 0\r\n          ? \"Others\"\r\n          : obj.properties?.pvBrand == 1\r\n          ? \"Hoymiles\"\r\n          : obj.properties?.pvBrand == 2\r\n          ? \"Enphase\"\r\n          : obj.properties?.pvBrand == 3\r\n          ? \"APSystems\"\r\n          : obj.properties?.pvBrand == 4\r\n          ? \"Anker\"\r\n          : obj.properties?.pvBrand == 5\r\n          ? \"Deye\"\r\n          : obj.properties?.pvBrand == 6\r\n          ? \"Bosswerk\"\r\n          : \"Unknown\";\r\n      updateSolarFlowState(adapter, productKey, deviceKey, \"pvBrand\", value);\r\n    }\r\n\r\n    if (\r\n      obj.properties?.inverseMaxPower != null &&\r\n      obj.properties?.inverseMaxPower != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"inverseMaxPower\",\r\n        obj.properties.inverseMaxPower,\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.wifiState != null &&\r\n      obj.properties?.wifiState != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"wifiState\",\r\n        obj.properties.wifiState == 1 ? \"Connected\" : \"Disconnected\",\r\n      );\r\n    }\r\n\r\n    if (\r\n      obj.properties?.hubState != null &&\r\n      obj.properties?.hubState != undefined\r\n    ) {\r\n      updateSolarFlowState(\r\n        adapter,\r\n        productKey,\r\n        deviceKey,\r\n        \"hubState\",\r\n        obj.properties.hubState == 0\r\n          ? \"Stop output and standby\"\r\n          : \"Stop output and shut down\",\r\n      );\r\n    }\r\n\r\n    if (obj.packData) {\r\n      addOrUpdatePackData(productKey, deviceKey, obj.packData);\r\n    }\r\n  }\r\n};\r\n\r\nexport const setChargeLimit = async (\r\n  adapter: ZendureSolarflow,\r\n  productKey: string,\r\n  deviceKey: string,\r\n  socSet: number,\r\n): Promise<void> => {\r\n  if (adapter.mqttClient && productKey && deviceKey) {\r\n    if (socSet > 40 && socSet <= 100) {\r\n      const topic = `iot/${productKey}/${deviceKey}/properties/write`;\r\n\r\n      const socSetLimit = { properties: { socSet: socSet * 10 } };\r\n      adapter.log.debug(\r\n        `[setChargeLimit] Setting ChargeLimit for device key ${deviceKey} to ${socSet}!`,\r\n      );\r\n      adapter.mqttClient?.publish(topic, JSON.stringify(socSetLimit));\r\n    } else {\r\n      adapter.log.debug(\r\n        `[setChargeLimit] Charge limit is not in range 40<>100!`,\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nexport const setDischargeLimit = async (\r\n  adapter: ZendureSolarflow,\r\n  productKey: string,\r\n  deviceKey: string,\r\n  minSoc: number,\r\n): Promise<void> => {\r\n  if (adapter.mqttClient && productKey && deviceKey) {\r\n    if (minSoc > 0 && minSoc < 90) {\r\n      const topic = `iot/${productKey}/${deviceKey}/properties/write`;\r\n\r\n      const socSetLimit = { properties: { minSoc: minSoc * 10 } };\r\n      adapter.log.debug(\r\n        `[setDischargeLimit] Setting Discharge Limit for device key ${deviceKey} to ${minSoc}!`,\r\n      );\r\n      adapter.mqttClient?.publish(topic, JSON.stringify(socSetLimit));\r\n    } else {\r\n      adapter.log.debug(\r\n        `[setDischargeLimit] Discharge limit is not in range 0<>90!`,\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nexport const setOutputLimit = async (\r\n  adapter: ZendureSolarflow,\r\n  productKey: string,\r\n  deviceKey: string,\r\n  limit: number,\r\n): Promise<void> => {\r\n  if (adapter.mqttClient && productKey && deviceKey) {\r\n    if (adapter.config.useLowVoltageBlock) {\r\n      const lowVoltageBlockState = await adapter.getStateAsync(\r\n        productKey + \".\" + deviceKey + \".control.lowVoltageBlock\",\r\n      );\r\n      if (\r\n        lowVoltageBlockState &&\r\n        lowVoltageBlockState.val &&\r\n        lowVoltageBlockState.val == true\r\n      ) {\r\n        limit = 0;\r\n      }\r\n    }\r\n\r\n    // Das Limit kann unter 100 nur in 30er Schritten gesetzt werden, dH. 30/60/90/100, wir rechnen das also um\r\n    const currentLimit = (\r\n      await adapter.getStateAsync(productKey + \".\" + deviceKey + \".outputLimit\")\r\n    )?.val;\r\n\r\n    if (currentLimit != null && currentLimit != undefined) {\r\n      if (currentLimit != limit) {\r\n        if (\r\n          limit < 100 &&\r\n          limit != 90 &&\r\n          limit != 60 &&\r\n          limit != 30 &&\r\n          limit != 0\r\n        ) {\r\n          if (limit < 100 && limit > 90) {\r\n            limit = 90;\r\n          } else if (limit < 90 && limit > 60) {\r\n            limit = 60;\r\n          } else if (limit < 60 && limit > 30) {\r\n            limit = 30;\r\n          } else if (limit < 30) {\r\n            limit = 30;\r\n          }\r\n        }\r\n\r\n        // 'iot/{auth.productKey}/{auth.deviceKey}/properties/write' == Topic? Oder productKey,deviceKey aus Device Details?\r\n        const topic = `iot/${productKey}/${deviceKey}/properties/write`;\r\n\r\n        const outputlimit = { properties: { outputLimit: limit } };\r\n        /* adapter.log.debug(\r\n          `[setOutputLimit] Setting Output Limit for device key ${deviceKey} to ${limit}!`,\r\n        ); */\r\n        adapter.mqttClient?.publish(topic, JSON.stringify(outputlimit));\r\n      } else {\r\n        /* adapter.log.debug(\r\n          `[setOutputLimit] Output Limit for device key ${deviceKey} is already at ${limit}!`,\r\n        ); */\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const setBuzzerSwitch = async (\r\n  adapter: ZendureSolarflow,\r\n  productKey: string,\r\n  deviceKey: string,\r\n  buzzerOn: boolean,\r\n): Promise<void> => {\r\n  if (adapter.mqttClient && productKey && deviceKey) {\r\n    const topic = `iot/${productKey}/${deviceKey}/properties/write`;\r\n\r\n    const socSetLimit = { properties: { buzzerSwitch: buzzerOn ? 1 : 0 } };\r\n    adapter.log.debug(\r\n      `[setBuzzer] Setting Buzzer for device key ${deviceKey} to ${buzzerOn}!`,\r\n    );\r\n    adapter.mqttClient?.publish(topic, JSON.stringify(socSetLimit));\r\n  }\r\n};\r\n\r\nexport const triggerFullTelemetryUpdate = async (\r\n  adapter: ZendureSolarflow,\r\n  productKey: string,\r\n  deviceKey: string,\r\n): Promise<void> => {\r\n  if (adapter.mqttClient && productKey && deviceKey) {\r\n    const topic = `iot/${productKey}/${deviceKey}/properties/read`;\r\n\r\n    const getAllContent = { properties: [\"getAll\"] };\r\n    adapter.log.debug(\r\n      `[triggerFullTelemetryUpdate] Triggering full telemetry update for device key ${deviceKey}!`,\r\n    );\r\n    adapter.mqttClient?.publish(topic, JSON.stringify(getAllContent));\r\n  }\r\n};\r\n\r\nexport const setPassMode = async (\r\n  adapter: ZendureSolarflow,\r\n  productKey: string,\r\n  deviceKey: string,\r\n  passMode: number,\r\n): Promise<void> => {\r\n  if (adapter.mqttClient && productKey && deviceKey) {\r\n    const topic = `iot/${productKey}/${deviceKey}/properties/write`;\r\n\r\n    const setPassModeContent = { properties: { passMode: passMode } };\r\n    adapter.log.debug(\r\n      `[setPassMode] Set passMode for device ${deviceKey} to ${passMode}!`,\r\n    );\r\n    adapter.mqttClient?.publish(topic, JSON.stringify(setPassModeContent));\r\n  }\r\n};\r\n\r\nexport const setAutoRecover = async (\r\n  adapter: ZendureSolarflow,\r\n  productKey: string,\r\n  deviceKey: string,\r\n  autoRecover: boolean,\r\n): Promise<void> => {\r\n  if (adapter.mqttClient && productKey && deviceKey) {\r\n    const topic = `iot/${productKey}/${deviceKey}/properties/write`;\r\n\r\n    const setAutoRecoverContent = {\r\n      properties: { autoRecover: autoRecover ? 1 : 0 },\r\n    };\r\n    adapter.log.debug(\r\n      `[setPassMode] Set autoRecover for device ${deviceKey} to ${autoRecover}!`,\r\n    );\r\n    adapter.mqttClient?.publish(topic, JSON.stringify(setAutoRecoverContent));\r\n  }\r\n};\r\n\r\nconst onConnected = (): void => {\r\n  adapter?.log.info(\"[onConnected] Connected with MQTT!\");\r\n};\r\n\r\nconst onError = (error: any): void => {\r\n  adapter?.log.error(\"Connection to MQTT failed! Error: \" + error);\r\n};\r\n\r\nconst onSubscribeReportTopic: any = (error: Error | null) => {\r\n  if (error) {\r\n    adapter?.log.error(\"Subscription to MQTT failed! Error: \" + error);\r\n  } else {\r\n    adapter?.log.debug(\"Subscription of Report Topic successful!\");\r\n  }\r\n};\r\n\r\nconst onSubscribeIotTopic: any = (\r\n  error: Error | null,\r\n  productKey: string,\r\n  deviceKey: string,\r\n) => {\r\n  if (error) {\r\n    adapter?.log.error(\"Subscription to MQTT failed! Error: \" + error);\r\n  } else if (adapter) {\r\n    adapter?.log.debug(\"Subscription of IOT Topic successful!\");\r\n    triggerFullTelemetryUpdate(adapter, productKey, deviceKey);\r\n  }\r\n};\r\n\r\nexport const connectMqttClient = (_adapter: ZendureSolarflow): void => {\r\n  adapter = _adapter;\r\n\r\n  const options: mqtt.IClientOptions = {\r\n    clientId: adapter.accessToken,\r\n    username: \"zenApp\",\r\n    password:\r\n      adapter.config.server && adapter.config.server == \"eu\"\r\n        ? \"H6s$j9CtNa0N\"\r\n        : \"oK#PCgy6OZxd\",\r\n    clean: true,\r\n    protocolVersion: 5,\r\n  };\r\n\r\n  if (mqtt && adapter && adapter.paths && adapter.deviceList) {\r\n    adapter.log.debug(\r\n      `[connectMqttClient] Connecting to MQTT broker ${\r\n        adapter.paths.mqttUrl + \":\" + adapter.paths.mqttPort\r\n      }...`,\r\n    );\r\n    adapter.mqttClient = mqtt.connect(\r\n      \"mqtt://\" + adapter.paths.mqttUrl + \":\" + adapter.paths.mqttPort,\r\n      options,\r\n    ); // create a client\r\n\r\n    if (adapter && adapter.mqttClient) {\r\n      adapter.mqttClient.on(\"connect\", onConnected);\r\n      adapter.mqttClient.on(\"error\", onError);\r\n\r\n      // Subscribe to Topic (appkey von Zendure)\r\n      adapter.deviceList.forEach(\r\n        (device: ISolarFlowDeviceDetails, index: number) => {\r\n          if (adapter) {\r\n            const reportTopic = `/${device.productKey}/${device.deviceKey}/properties/report`;\r\n            const iotTopic = `iot/${device.productKey}/${device.deviceKey}/#`;\r\n\r\n            setTimeout(() => {\r\n              if (adapter) {\r\n                adapter.log.debug(\r\n                  `[connectMqttClient] Subscribing to MQTT Topic: ${reportTopic}`,\r\n                );\r\n                adapter.mqttClient?.subscribe(\r\n                  reportTopic,\r\n                  onSubscribeReportTopic,\r\n                );\r\n              }\r\n            }, 1000 * index);\r\n\r\n            setTimeout(() => {\r\n              adapter?.log.debug(\r\n                `[connectMqttClient] Subscribing to MQTT Topic: ${iotTopic}`,\r\n              );\r\n              adapter?.mqttClient?.subscribe(iotTopic, (error) => {\r\n                onSubscribeIotTopic(error, device.productKey, device.deviceKey);\r\n              });\r\n            }, 1500 * index);\r\n          }\r\n        },\r\n      );\r\n\r\n      adapter.mqttClient.on(\"message\", onMessage);\r\n\r\n      // Job starten die states in der Nacht zu resetten\r\n      startResetValuesJob(adapter);\r\n\r\n      // Job starten die States zu checken\r\n      startCheckStatesAndConnectionJob(adapter);\r\n\r\n      // Den Access Token aktualiseren\r\n      startRefreshAccessTokenTimerJob(adapter);\r\n\r\n      // Calculation Job starten sofern aktiviert\r\n      if (adapter.config.useCalculation) {\r\n        startCalculationJob(adapter);\r\n      }\r\n    }\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": ["adapter"]
}
