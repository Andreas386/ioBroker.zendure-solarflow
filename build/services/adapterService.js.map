{
  "version": 3,
  "sources": ["../../src/services/adapterService.ts"],
  "sourcesContent": ["import { ZendureSolarflow } from \"../main\";\r\nimport { IPackData } from \"../models/IPackData\";\r\nimport { ISolarFlowDeviceDetails } from \"../models/ISolarFlowDeviceDetails\";\r\nimport { getDeviceList } from \"./webService\";\r\n\r\n/* eslint-disable @typescript-eslint/indent */\r\nexport const createSolarFlowStates = async (\r\n  adapter: ZendureSolarflow,\r\n  productKey: string,\r\n  deviceKey: string,\r\n): Promise<void> => {\r\n  productKey = productKey.replace(adapter.FORBIDDEN_CHARS, \"\");\r\n  deviceKey = deviceKey.replace(adapter.FORBIDDEN_CHARS, \"\");\r\n\r\n  // Create device (e.g. the product type -> SolarFlow)\r\n  await adapter?.extendObjectAsync(productKey, {\r\n    type: \"device\",\r\n    common: {\r\n      name: { de: \"Produkt \" + productKey, en: \"Product \" + productKey },\r\n    },\r\n    native: {},\r\n  });\r\n\r\n  // Create channel (e.g. the device specific key)\r\n  await adapter?.extendObjectAsync(productKey + \".\" + deviceKey, {\r\n    type: \"channel\",\r\n    common: {\r\n      name: { de: \"Device Key \" + deviceKey, en: \"Device Key \" + deviceKey },\r\n    },\r\n    native: {},\r\n  });\r\n\r\n  // Create control folder\r\n  await adapter?.extendObjectAsync(productKey + \".\" + deviceKey + \".control\", {\r\n    type: \"channel\",\r\n    common: {\r\n      name: {\r\n        de: \"Steuerung Device \" + deviceKey,\r\n        en: \"Control Device \" + deviceKey,\r\n      },\r\n    },\r\n    native: {},\r\n  });\r\n\r\n  // Create pack data folder\r\n  await adapter?.extendObjectAsync(productKey + \".\" + deviceKey + \".packData\", {\r\n    type: \"channel\",\r\n    common: {\r\n      name: {\r\n        de: \"Akku Packs\",\r\n        en: \"Battery packs\",\r\n      },\r\n    },\r\n    native: {},\r\n  });\r\n\r\n  await adapter?.extendObjectAsync(\r\n    productKey + \".\" + deviceKey + \".\" + \"lastUpdate\",\r\n    {\r\n      type: \"state\",\r\n      common: {\r\n        name: { de: \"Letztes Update\", en: \"Last Update\" },\r\n        type: \"number\",\r\n        desc: \"lastUpdate\",\r\n        role: \"value.time\",\r\n        read: true,\r\n        write: false,\r\n      },\r\n      native: {},\r\n    },\r\n  );\r\n\r\n  await adapter?.extendObjectAsync(\r\n    productKey + \".\" + deviceKey + \".\" + \"electricLevel\",\r\n    {\r\n      type: \"state\",\r\n      common: {\r\n        name: { de: \"SOC Gesamtsystem\", en: \"SOC of the system\" },\r\n        type: \"number\",\r\n        desc: \"electricLevel\",\r\n        role: \"value.battery\",\r\n        read: true,\r\n        write: false,\r\n        unit: \"%\",\r\n      },\r\n      native: {},\r\n    },\r\n  );\r\n\r\n  await adapter?.extendObjectAsync(\r\n    productKey + \".\" + deviceKey + \".\" + \"outputHomePower\",\r\n    {\r\n      type: \"state\",\r\n      common: {\r\n        name: { de: \"Ausgangsleistung\", en: \"output power\" },\r\n        type: \"number\",\r\n        desc: \"outputHomePower\",\r\n        role: \"value.power\",\r\n        read: true,\r\n        write: false,\r\n        unit: \"W\",\r\n      },\r\n      native: {},\r\n    },\r\n  );\r\n\r\n  await adapter?.extendObjectAsync(\r\n    productKey + \".\" + deviceKey + \".\" + \"outputLimit\",\r\n    {\r\n      type: \"state\",\r\n      common: {\r\n        name: { de: \"Limit der Ausgangsleistung\", en: \"limit of output power\" },\r\n        type: \"number\",\r\n        desc: \"outputLimit\",\r\n        role: \"value.power\",\r\n        read: true,\r\n        write: false,\r\n        unit: \"W\",\r\n      },\r\n      native: {},\r\n    },\r\n  );\r\n\r\n  await adapter?.extendObjectAsync(\r\n    productKey + \".\" + deviceKey + \".\" + \"outputPackPower\",\r\n    {\r\n      type: \"state\",\r\n      common: {\r\n        name: { de: \"Ladeleistung zum Akku\", en: \"charge power\" },\r\n        type: \"number\",\r\n        desc: \"outputPackPower\",\r\n        role: \"value.power\",\r\n        read: true,\r\n        write: false,\r\n        unit: \"W\",\r\n      },\r\n      native: {},\r\n    },\r\n  );\r\n\r\n  await adapter?.extendObjectAsync(\r\n    productKey + \".\" + deviceKey + \".\" + \"packInputPower\",\r\n    {\r\n      type: \"state\",\r\n      common: {\r\n        name: { de: \"Entladeleistung zum Akku\", en: \"discharge power\" },\r\n        type: \"number\",\r\n        desc: \"packInputPower\",\r\n        role: \"value.power\",\r\n        read: true,\r\n        write: false,\r\n        unit: \"W\",\r\n      },\r\n      native: {},\r\n    },\r\n  );\r\n\r\n  await adapter?.extendObjectAsync(\r\n    productKey + \".\" + deviceKey + \".\" + \"solarInputPower\",\r\n    {\r\n      type: \"state\",\r\n      common: {\r\n        name: { de: \"Leistung der Solarmodule\", en: \"solar power\" },\r\n        type: \"number\",\r\n        desc: \"solarInputPower\",\r\n        role: \"value.power.produced\",\r\n        read: true,\r\n        write: false,\r\n        unit: \"W\",\r\n      },\r\n      native: {},\r\n    },\r\n  );\r\n\r\n  await adapter?.extendObjectAsync(\r\n    productKey + \".\" + deviceKey + \".\" + \"pvPower1\",\r\n    {\r\n      type: \"state\",\r\n      common: {\r\n        name: { de: \"Leistung PV 1\", en: \"solar power channel 1\" },\r\n        type: \"number\",\r\n        desc: \"pvPower1\",\r\n        role: \"value.power.produced\",\r\n        read: true,\r\n        write: false,\r\n        unit: \"W\",\r\n      },\r\n      native: {},\r\n    },\r\n  );\r\n\r\n  await adapter?.extendObjectAsync(\r\n    productKey + \".\" + deviceKey + \".\" + \"pvPower2\",\r\n    {\r\n      type: \"state\",\r\n      common: {\r\n        name: { de: \"Leistung PV 2\", en: \"solar power channel 2\" },\r\n        type: \"number\",\r\n        desc: \"pvPower2\",\r\n        role: \"value.power.produced\",\r\n        read: true,\r\n        write: false,\r\n        unit: \"W\",\r\n      },\r\n      native: {},\r\n    },\r\n  );\r\n\r\n  await adapter?.extendObjectAsync(\r\n    productKey + \".\" + deviceKey + \".\" + \"remainInputTime\",\r\n    {\r\n      type: \"state\",\r\n      common: {\r\n        name: { de: \"Erwartete Ladedauer\", en: \"remaining charge time\" },\r\n        type: \"number\",\r\n        desc: \"remainInputTime\",\r\n        role: \"value.interval\",\r\n        read: true,\r\n        write: false,\r\n      },\r\n      native: {},\r\n    },\r\n  );\r\n\r\n  await adapter?.extendObjectAsync(\r\n    productKey + \".\" + deviceKey + \".\" + \"remainOutTime\",\r\n    {\r\n      type: \"state\",\r\n      common: {\r\n        name: { de: \"Erwartete Entladedauer\", en: \"remaining discharge time\" },\r\n        type: \"number\",\r\n        desc: \"remainOutTime\",\r\n        role: \"value.interval\",\r\n        read: true,\r\n        write: false,\r\n      },\r\n      native: {},\r\n    },\r\n  );\r\n\r\n  await adapter?.extendObjectAsync(\r\n    productKey + \".\" + deviceKey + \".\" + \"socSet\",\r\n    {\r\n      type: \"state\",\r\n      common: {\r\n        name: { de: \"Max. SOC\", en: \"max. SOC\" },\r\n        type: \"number\",\r\n        desc: \"socSet\",\r\n        role: \"value.battery\",\r\n        read: true,\r\n        write: false,\r\n        unit: \"%\",\r\n      },\r\n      native: {},\r\n    },\r\n  );\r\n\r\n  await adapter?.extendObjectAsync(\r\n    productKey + \".\" + deviceKey + \".\" + \"minSoc\",\r\n    {\r\n      type: \"state\",\r\n      common: {\r\n        name: { de: \"Min. SOC\", en: \"min. SOC\" },\r\n        type: \"number\",\r\n        desc: \"minSoc\",\r\n        role: \"value.battery\",\r\n        read: true,\r\n        write: false,\r\n        unit: \"%\",\r\n      },\r\n      native: {},\r\n    },\r\n  );\r\n\r\n  // State zum Setzen des Output Limit\r\n  await adapter?.extendObjectAsync(\r\n    productKey + \".\" + deviceKey + \".control.\" + \"setOutputLimit\",\r\n    {\r\n      type: \"state\",\r\n      common: {\r\n        name: {\r\n          de: \"Einzustellende Ausgangsleistung\",\r\n          en: \"Control of the output limit\",\r\n        },\r\n        type: \"number\",\r\n        desc: \"setOutputLimit\",\r\n        role: \"value.power\",\r\n        read: true,\r\n        write: true,\r\n        min: 0,\r\n        unit: \"W\",\r\n      },\r\n      native: {},\r\n    },\r\n  );\r\n\r\n  // Subscibe to State updates to listen to changes\r\n  adapter?.subscribeStates(\r\n    productKey + \".\" + deviceKey + \".control.\" + \"setOutputLimit\",\r\n  );\r\n};\r\n\r\nexport const addOrUpdatePackData = async (\r\n  adapter: ZendureSolarflow,\r\n  productKey: string,\r\n  deviceKey: string,\r\n  packData: IPackData[],\r\n): Promise<void> => {\r\n  await packData.forEach(async (x) => {\r\n    // Process data only with a serial id!\r\n    if (x.sn) {\r\n      // create a state for the serial id\r\n      const key = (productKey + \".\" + deviceKey + \".packData.\" + x.sn).replace(\r\n        adapter.FORBIDDEN_CHARS,\r\n        \"\",\r\n      );\r\n\r\n      await adapter?.extendObjectAsync(key + \".sn\", {\r\n        type: \"state\",\r\n        common: {\r\n          name: {\r\n            de: \"Seriennummer\",\r\n            en: \"Serial id\",\r\n          },\r\n          type: \"string\",\r\n          desc: \"Serial ID\",\r\n          role: \"value\",\r\n          read: true,\r\n          write: false,\r\n        },\r\n        native: {},\r\n      });\r\n\r\n      await adapter?.setStateAsync(key + \".sn\", x.sn, true);\r\n\r\n      if (x.socLevel) {\r\n        // State f\u00FCr socLevel\r\n        await adapter?.extendObjectAsync(key + \".socLevel\", {\r\n          type: \"state\",\r\n          common: {\r\n            name: {\r\n              de: \"SOC der Batterie\",\r\n              en: \"soc of battery\",\r\n            },\r\n            type: \"number\",\r\n            desc: \"SOC Level\",\r\n            role: \"value\",\r\n            read: true,\r\n            write: false,\r\n          },\r\n          native: {},\r\n        });\r\n\r\n        await adapter?.setStateAsync(key + \".socLevel\", x.socLevel, true);\r\n      }\r\n\r\n      if (x.maxTemp) {\r\n        // State f\u00FCr maxTemp\r\n        await adapter?.extendObjectAsync(key + \".maxTemp\", {\r\n          type: \"state\",\r\n          common: {\r\n            name: {\r\n              de: \"Max. Temperatur der Batterie\",\r\n              en: \"max temp. of battery\",\r\n            },\r\n            type: \"number\",\r\n            desc: \"Max. Temp\",\r\n            role: \"value\",\r\n            read: true,\r\n            write: false,\r\n          },\r\n          native: {},\r\n        });\r\n\r\n        // Convert Kelvin to Celsius\r\n        await adapter?.setStateAsync(\r\n          key + \".maxTemp\",\r\n          x.maxTemp / 10 - 273.15,\r\n          true,\r\n        );\r\n      }\r\n\r\n      if (x.minVol) {\r\n        await adapter?.extendObjectAsync(key + \".minVol\", {\r\n          type: \"state\",\r\n          common: {\r\n            name: \"minVol\",\r\n            type: \"number\",\r\n            desc: \"minVol\",\r\n            role: \"value\",\r\n            read: true,\r\n            write: false,\r\n          },\r\n          native: {},\r\n        });\r\n\r\n        await adapter?.setStateAsync(key + \".minVol\", x.minVol / 100, true);\r\n      }\r\n\r\n      if (x.maxVol) {\r\n        await adapter?.extendObjectAsync(key + \".maxVol\", {\r\n          type: \"state\",\r\n          common: {\r\n            name: \"maxVol\",\r\n            type: \"number\",\r\n            desc: \"maxVol\",\r\n            role: \"value\",\r\n            read: true,\r\n            write: false,\r\n          },\r\n          native: {},\r\n        });\r\n\r\n        await adapter?.setStateAsync(key + \".maxVol\", x.maxVol / 100, true);\r\n      }\r\n\r\n      if (x.totalVol) {\r\n        await adapter?.extendObjectAsync(key + \".totalVol\", {\r\n          type: \"state\",\r\n          common: {\r\n            name: \"totalVol\",\r\n            type: \"number\",\r\n            desc: \"totalVol\",\r\n            role: \"value\",\r\n            read: true,\r\n            write: false,\r\n          },\r\n          native: {},\r\n        });\r\n\r\n        await adapter?.setStateAsync(\r\n          key + \".totalVol\",\r\n          x.totalVol / 100,\r\n          true,\r\n        );\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nexport const startCheckStatesTimer = async (\r\n  adapter: ZendureSolarflow,\r\n): Promise<void> => {\r\n  // Check for states that has no updates in the last 5 minutes and set them to 0\r\n  const statesToReset: string[] = [\r\n    \"outputHomePower\",\r\n    \"outputPackPower\",\r\n    \"packInputPower\",\r\n    \"solarInputPower\",\r\n  ];\r\n\r\n  adapter.interval = adapter.setInterval(async () => {\r\n    getDeviceList(adapter)\r\n      .then((deviceList: ISolarFlowDeviceDetails[]) => {\r\n        deviceList.forEach(async (device: ISolarFlowDeviceDetails) => {\r\n          const lastUpdate = await adapter?.getStateAsync(\r\n            device.productKey + \".\" + device.deviceKey + \".lastUpdate\",\r\n          );\r\n\r\n          const tenMinutesAgo = Date.now() / 1000 - 10 * 60; // Ten minutes ago\r\n          if (\r\n            lastUpdate &&\r\n            lastUpdate.val &&\r\n            Number(lastUpdate.val) < tenMinutesAgo\r\n          ) {\r\n            adapter.log.debug(\r\n              `Last update for deviceKey ${device.deviceKey} was at ${new Date(\r\n                Number(lastUpdate),\r\n              )}, checking for pseudo power values!`,\r\n            );\r\n            // State was not updated in the last 10 minutes... set states to 0\r\n            await statesToReset.forEach(async (stateName: string) => {\r\n              await adapter?.setStateAsync(\r\n                device.productKey + \".\" + device.deviceKey + \".\" + stateName,\r\n                0,\r\n                true,\r\n              );\r\n            });\r\n\r\n            // set electricLevel from deviceList\r\n            await adapter?.setStateAsync(\r\n              device.productKey + \".\" + device.deviceKey + \".electricLevel\",\r\n              device.electricity,\r\n              true,\r\n            );\r\n          }\r\n        });\r\n      })\r\n      .catch(() => {\r\n        adapter.log?.error(\"Retrieving device failed!\");\r\n        return null;\r\n      });\r\n  }, 50000);\r\n};\r\n\r\nexport const updateSolarFlowState = async (\r\n  adapter: ZendureSolarflow,\r\n  productKey: string,\r\n  deviceKey: string,\r\n  state: string,\r\n  val: number | string,\r\n): Promise<void> => {\r\n  adapter?.setStateAsync(\r\n    productKey + \".\" + deviceKey + \".\" + state,\r\n    val,\r\n    true,\r\n  );\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
